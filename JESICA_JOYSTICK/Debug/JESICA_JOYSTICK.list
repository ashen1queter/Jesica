
JESICA_JOYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b24  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008cbc  08008cbc  00009cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d2c  08008d2c  0000a140  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d2c  08008d2c  00009d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d34  08008d34  0000a140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d34  08008d34  00009d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d38  08008d38  00009d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  20000000  08008d3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b9c  20000140  08008e7c  0000a140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cdc  08008e7c  0000acdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015599  00000000  00000000  0000a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000374b  00000000  00000000  0001f709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00022e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e81  00000000  00000000  00024158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a54b  00000000  00000000  00024fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001804b  00000000  00000000  0003f524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bfb0  00000000  00000000  0005756f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f351f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f2c  00000000  00000000  000f3564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000f8490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000140 	.word	0x20000140
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008ca4 	.word	0x08008ca4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000144 	.word	0x20000144
 80001d4:	08008ca4 	.word	0x08008ca4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	Joystick_struct.joystick_throttle = (int16_t)adc_buff[0]-2048;
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_ADC_ConvCpltCallback+0x5c>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	b29b      	uxth	r3, r3
 8000512:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000516:	b29b      	uxth	r3, r3
 8000518:	b21a      	sxth	r2, r3
 800051a:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_ADC_ConvCpltCallback+0x60>)
 800051c:	801a      	strh	r2, [r3, #0]
	Joystick_struct.joystick_roll = (int16_t)adc_buff[1]-2048;
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000520:	885b      	ldrh	r3, [r3, #2]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000528:	b29b      	uxth	r3, r3
 800052a:	b21a      	sxth	r2, r3
 800052c:	4b0d      	ldr	r3, [pc, #52]	@ (8000564 <HAL_ADC_ConvCpltCallback+0x60>)
 800052e:	805a      	strh	r2, [r3, #2]
	Joystick_struct.joystick_yaw = (int16_t)adc_buff[2]-2048;
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000532:	889b      	ldrh	r3, [r3, #4]
 8000534:	b29b      	uxth	r3, r3
 8000536:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800053a:	b29b      	uxth	r3, r3
 800053c:	b21a      	sxth	r2, r3
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <HAL_ADC_ConvCpltCallback+0x60>)
 8000540:	809a      	strh	r2, [r3, #4]
	Joystick_struct.joystick_pitch = (int16_t)adc_buff[3]-2048;
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000544:	88db      	ldrh	r3, [r3, #6]
 8000546:	b29b      	uxth	r3, r3
 8000548:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800054c:	b29b      	uxth	r3, r3
 800054e:	b21a      	sxth	r2, r3
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <HAL_ADC_ConvCpltCallback+0x60>)
 8000552:	80da      	strh	r2, [r3, #6]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	200002dc 	.word	0x200002dc
 8000564:	200002e4 	.word	0x200002e4

08000568 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000576:	4a0b      	ldr	r2, [pc, #44]	@ (80005a4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000578:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	b21a      	sxth	r2, r3
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000582:	801a      	strh	r2, [r3, #0]
	position = count/4;
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800058a:	2b00      	cmp	r3, #0
 800058c:	da00      	bge.n	8000590 <HAL_TIM_IC_CaptureCallback+0x28>
 800058e:	3303      	adds	r3, #3
 8000590:	109b      	asrs	r3, r3, #2
 8000592:	b21a      	sxth	r2, r3
 8000594:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <HAL_TIM_IC_CaptureCallback+0x44>)
 8000596:	801a      	strh	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	200002f0 	.word	0x200002f0
 80005a8:	200002f4 	.word	0x200002f4
 80005ac:	200002f6 	.word	0x200002f6

080005b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM10) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d132      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x78>
    HAL_TIM_Base_Stop_IT(htim);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f003 ff7e 	bl	80044c4 <HAL_TIM_Base_Stop_IT>

    for (int i = 0; i < NUM_BUTTONS; i++) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e029      	b.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x72>
      if (Buttons_struct[i].debounce_pending) {
 80005ce:	4a19      	ldr	r2, [pc, #100]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4413      	add	r3, r2
 80005d6:	79db      	ldrb	r3, [r3, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d01f      	beq.n	800061c <HAL_TIM_PeriodElapsedCallback+0x6c>
    	Buttons_struct[i].state = (HAL_GPIO_ReadPin(Buttons_struct[i].port, Buttons_struct[i].pin) == GPIO_PIN_RESET) ? 1 : 0;
 80005dc:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005e4:	4913      	ldr	r1, [pc, #76]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	440b      	add	r3, r1
 80005ec:	889b      	ldrh	r3, [r3, #4]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f002 f83b 	bl	800266c <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf0c      	ite	eq
 80005fc:	2301      	moveq	r3, #1
 80005fe:	2300      	movne	r3, #0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	4413      	add	r3, r2
 800060c:	460a      	mov	r2, r1
 800060e:	719a      	strb	r2, [r3, #6]
    	Buttons_struct[i].debounce_pending = 0;
 8000610:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	4413      	add	r3, r2
 8000618:	2200      	movs	r2, #0
 800061a:	71da      	strb	r2, [r3, #7]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b03      	cmp	r3, #3
 8000626:	ddd2      	ble.n	80005ce <HAL_TIM_PeriodElapsedCallback+0x1e>
      }
    }
  }
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40014400 	.word	0x40014400
 8000634:	20000000 	.word	0x20000000

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fc5a 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f84a 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 fa14 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000648:	f000 f9f2 	bl	8000a30 <MX_DMA_Init>
  MX_ADC1_Init();
 800064c:	f000 f8ae 	bl	80007ac <MX_ADC1_Init>
  MX_TIM2_Init();
 8000650:	f000 f92a 	bl	80008a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000654:	f007 fe9a 	bl	800838c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000658:	f000 f978 	bl	800094c <MX_TIM3_Init>
  MX_TIM10_Init();
 800065c:	f000 f9c4 	bl	80009e8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, 4);
 8000660:	2204      	movs	r2, #4
 8000662:	4916      	ldr	r1, [pc, #88]	@ (80006bc <main+0x84>)
 8000664:	4816      	ldr	r0, [pc, #88]	@ (80006c0 <main+0x88>)
 8000666:	f000 fe2f 	bl	80012c8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800066a:	4816      	ldr	r0, [pc, #88]	@ (80006c4 <main+0x8c>)
 800066c:	f003 fed0 	bl	8004410 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000670:	213c      	movs	r1, #60	@ 0x3c
 8000672:	4815      	ldr	r0, [pc, #84]	@ (80006c8 <main+0x90>)
 8000674:	f003 fffb 	bl	800466e <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Joystick_struct.buttons = (Buttons_struct[0].state << 3 | Buttons_struct[1].state << 1 | Buttons_struct[2].state << 2 | Buttons_struct[3].state);
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <main+0x94>)
 800067a:	799b      	ldrb	r3, [r3, #6]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	b25a      	sxtb	r2, r3
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <main+0x94>)
 8000684:	7b9b      	ldrb	r3, [r3, #14]
 8000686:	b25b      	sxtb	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b25b      	sxtb	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b25a      	sxtb	r2, r3
 8000690:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <main+0x94>)
 8000692:	7d9b      	ldrb	r3, [r3, #22]
 8000694:	b25b      	sxtb	r3, r3
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	b25b      	sxtb	r3, r3
 800069a:	4313      	orrs	r3, r2
 800069c:	b25a      	sxtb	r2, r3
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <main+0x94>)
 80006a0:	7f9b      	ldrb	r3, [r3, #30]
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <main+0x98>)
 80006ac:	721a      	strb	r2, [r3, #8]
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &Joystick_struct, sizeof(Joystick_struct));
 80006ae:	2209      	movs	r2, #9
 80006b0:	4907      	ldr	r1, [pc, #28]	@ (80006d0 <main+0x98>)
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <main+0x9c>)
 80006b4:	f006 f9c2 	bl	8006a3c <USBD_CUSTOM_HID_SendReport>
	  Joystick_struct.buttons = (Buttons_struct[0].state << 3 | Buttons_struct[1].state << 1 | Buttons_struct[2].state << 2 | Buttons_struct[3].state);
 80006b8:	bf00      	nop
 80006ba:	e7dd      	b.n	8000678 <main+0x40>
 80006bc:	200002dc 	.word	0x200002dc
 80006c0:	2000015c 	.word	0x2000015c
 80006c4:	2000024c 	.word	0x2000024c
 80006c8:	20000204 	.word	0x20000204
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200002e4 	.word	0x200002e4
 80006d4:	20000300 	.word	0x20000300

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 fab0 	bl	8008c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	@ (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000748:	2319      	movs	r3, #25
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000752:	2304      	movs	r3, #4
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000756:	2307      	movs	r3, #7
 8000758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f003 f9d6 	bl	8003b10 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 f9cb 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fc38 	bl	8004000 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f9b5 	bl	8000b04 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007c0:	4a38      	ldr	r2, [pc, #224]	@ (80008a4 <MX_ADC1_Init+0xf8>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 80007fe:	2204      	movs	r2, #4
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	4823      	ldr	r0, [pc, #140]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 8000812:	f000 fc05 	bl	8001020 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800081c:	f000 f972 	bl	8000b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000828:	2307      	movs	r3, #7
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	481b      	ldr	r0, [pc, #108]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 8000832:	f000 fe5b 	bl	80014ec <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800083c:	f000 f962 	bl	8000b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000840:	2301      	movs	r3, #1
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 800084e:	f000 fe4d 	bl	80014ec <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000858:	f000 f954 	bl	8000b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800085c:	2306      	movs	r3, #6
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000860:	2303      	movs	r3, #3
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 800086a:	f000 fe3f 	bl	80014ec <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000874:	f000 f946 	bl	8000b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000878:	2307      	movs	r3, #7
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000880:	2301      	movs	r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_ADC1_Init+0xf4>)
 800088a:	f000 fe2f 	bl	80014ec <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000894:	f000 f936 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000015c 	.word	0x2000015c
 80008a4:	40012000 	.word	0x40012000

080008a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2224      	movs	r2, #36	@ 0x24
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f008 f9c8 	bl	8008c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_TIM2_Init+0xa0>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_TIM2_Init+0xa0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_TIM2_Init+0xa0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ENCODER_MODES-1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_TIM2_Init+0xa0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_TIM2_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_TIM2_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f2:	2301      	movs	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000902:	2301      	movs	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <MX_TIM2_Init+0xa0>)
 8000916:	f003 fe04 	bl	8004522 <HAL_TIM_Encoder_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f8f0 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_TIM2_Init+0xa0>)
 8000932:	f004 fa65 	bl	8004e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800093c:	f000 f8e2 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3730      	adds	r7, #48	@ 0x30
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000204 	.word	0x20000204

0800094c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_TIM3_Init+0x94>)
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <MX_TIM3_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_TIM3_Init+0x94>)
 8000970:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000974:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM3_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_TIM3_Init+0x94>)
 800097e:	2263      	movs	r2, #99	@ 0x63
 8000980:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_TIM3_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_TIM3_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <MX_TIM3_Init+0x94>)
 8000990:	f003 fcee 	bl	8004370 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f8b3 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_TIM3_Init+0x94>)
 80009ac:	f003 fffd 	bl	80049aa <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f8a5 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009ba:	2320      	movs	r3, #32
 80009bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_TIM3_Init+0x94>)
 80009c8:	f004 fa1a 	bl	8004e00 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009d2:	f000 f897 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000024c 	.word	0x2000024c
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_TIM10_Init+0x40>)
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <MX_TIM10_Init+0x44>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <MX_TIM10_Init+0x40>)
 80009f4:	2253      	movs	r2, #83	@ 0x53
 80009f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <MX_TIM10_Init+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = DEBOUNCE_COUNT-1;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_TIM10_Init+0x40>)
 8000a00:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <MX_TIM10_Init+0x40>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_TIM10_Init+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_TIM10_Init+0x40>)
 8000a14:	f003 fcac 	bl	8004370 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000a1e:	f000 f871 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000294 	.word	0x20000294
 8000a2c:	40014400 	.word	0x40014400

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_DMA_Init+0x3c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <MX_DMA_Init+0x3c>)
 8000a40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_DMA_Init+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2038      	movs	r0, #56	@ 0x38
 8000a58:	f001 f8dd 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a5c:	2038      	movs	r0, #56	@ 0x38
 8000a5e:	f001 f8f6 	bl	8001c4e <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_GPIO_Init+0x8c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOYSTICK_BTN_Pin WHEEL_BTN_Pin MULTI_BTN_Pin PRG_BTN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin|WHEEL_BTN_Pin|MULTI_BTN_Pin|PRG_BTN_Pin;
 8000ada:	233c      	movs	r3, #60	@ 0x3c
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ade:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_GPIO_Init+0x90>)
 8000af0:	f001 fc38 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a33      	ldr	r2, [pc, #204]	@ (8000c4c <HAL_ADC_MspInit+0xec>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d160      	bne.n	8000c44 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b32      	ldr	r3, [pc, #200]	@ (8000c50 <HAL_ADC_MspInit+0xf0>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a31      	ldr	r2, [pc, #196]	@ (8000c50 <HAL_ADC_MspInit+0xf0>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <HAL_ADC_MspInit+0xf0>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <HAL_ADC_MspInit+0xf0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c50 <HAL_ADC_MspInit+0xf0>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <HAL_ADC_MspInit+0xf0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = JOYSTICK_THROTTLE_Pin|JOYSTICK_ROLL_Pin|JOYSTICK_YAW_Pin|JOYSTICK_PITCH_Pin;
 8000bba:	23c3      	movs	r3, #195	@ 0xc3
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4821      	ldr	r0, [pc, #132]	@ (8000c54 <HAL_ADC_MspInit+0xf4>)
 8000bce:	f001 fbc9 	bl	8002364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bd4:	4a21      	ldr	r2, [pc, #132]	@ (8000c5c <HAL_ADC_MspInit+0xfc>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000c04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000c0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c10:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c18:	480f      	ldr	r0, [pc, #60]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000c1a:	f001 f833 	bl	8001c84 <HAL_DMA_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c24:	f7ff ff6e 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000c2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_ADC_MspInit+0xf8>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2012      	movs	r0, #18
 8000c3a:	f000 ffec 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c3e:	2012      	movs	r0, #18
 8000c40:	f001 f805 	bl	8001c4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40012000 	.word	0x40012000
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	200001a4 	.word	0x200001a4
 8000c5c:	40026410 	.word	0x40026410

08000c60 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c80:	d152      	bne.n	8000d28 <HAL_TIM_Encoder_MspInit+0xc8>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a29      	ldr	r2, [pc, #164]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a22      	ldr	r2, [pc, #136]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = WHEEL_B_Pin;
 8000cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(WHEEL_B_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4810      	ldr	r0, [pc, #64]	@ (8000d34 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000cf4:	f001 fb36 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WHEEL_A_Pin;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(WHEEL_A_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <HAL_TIM_Encoder_MspInit+0xd8>)
 8000d14:	f001 fb26 	bl	8002364 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f000 ff7a 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d22:	201c      	movs	r0, #28
 8000d24:	f000 ff93 	bl	8001c4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020400 	.word	0x40020400

08000d3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a18      	ldr	r2, [pc, #96]	@ (8000dac <HAL_TIM_Base_MspInit+0x70>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10e      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <HAL_TIM_Base_MspInit+0x74>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a16      	ldr	r2, [pc, #88]	@ (8000db0 <HAL_TIM_Base_MspInit+0x74>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <HAL_TIM_Base_MspInit+0x74>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000d6a:	e01a      	b.n	8000da2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <HAL_TIM_Base_MspInit+0x78>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d115      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <HAL_TIM_Base_MspInit+0x74>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <HAL_TIM_Base_MspInit+0x74>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_TIM_Base_MspInit+0x74>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2019      	movs	r0, #25
 8000d98:	f000 ff3d 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d9c:	2019      	movs	r0, #25
 8000d9e:	f000 ff56 	bl	8001c4e <HAL_NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40000400 	.word	0x40000400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40014400 	.word	0x40014400

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0e:	f000 f8c3 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <ADC_IRQHandler+0x10>)
 8000e1e:	f000 f942 	bl	80010a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000015c 	.word	0x2000015c

08000e2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e32:	f003 fcca 	bl	80047ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000294 	.word	0x20000294

08000e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <TIM2_IRQHandler+0x10>)
 8000e46:	f003 fcc0 	bl	80047ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000204 	.word	0x20000204

08000e54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <DMA2_Stream0_IRQHandler+0x10>)
 8000e5a:	f001 f819 	bl	8001e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001a4 	.word	0x200001a4

08000e68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <OTG_FS_IRQHandler+0x10>)
 8000e6e:	f001 fd59 	bl	8002924 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200007dc 	.word	0x200007dc

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea4:	f7ff ffea 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	@ (8000edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	@ (8000ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8000eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f007 fec5 	bl	8008c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fbb1 	bl	8000638 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8000ee4:	08008d3c 	.word	0x08008d3c
  ldr r2, =_sbss
 8000ee8:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8000eec:	20000cdc 	.word	0x20000cdc

08000ef0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <DMA1_Stream0_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 fe6f 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fdf2 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fe87 	bl	8001c6a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 fe4f 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	@ (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000020 	.word	0x20000020
 8000f90:	20000028 	.word	0x20000028
 8000f94:	20000024 	.word	0x20000024

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	200002f8 	.word	0x200002f8

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200002f8 	.word	0x200002f8

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000028 	.word	0x20000028

08001020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e033      	b.n	800109e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fd8e 	bl	8000b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fb6c 	bl	8001750 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
 800108e:	e001      	b.n	8001094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d049      	beq.n	8001170 <HAL_ADC_IRQHandler+0xca>
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d046      	beq.n	8001170 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d12b      	bne.n	8001160 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800110c:	2b00      	cmp	r3, #0
 800110e:	d127      	bne.n	8001160 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001128:	2b00      	cmp	r3, #0
 800112a:	d119      	bne.n	8001160 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0220 	bic.w	r2, r2, #32
 800113a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff f9cf 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f06f 0212 	mvn.w	r2, #18
 800116e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d057      	beq.n	8001236 <HAL_ADC_IRQHandler+0x190>
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d054      	beq.n	8001236 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d139      	bne.n	8001226 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12b      	bne.n	8001226 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d124      	bne.n	8001226 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d11d      	bne.n	8001226 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d119      	bne.n	8001226 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001200:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d105      	bne.n	8001226 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fc10 	bl	8001a4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 020c 	mvn.w	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001244:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <HAL_ADC_IRQHandler+0x1d6>
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10d      	bne.n	800127c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f929 	bl	80014c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f06f 0201 	mvn.w	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800128a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d015      	beq.n	80012be <HAL_ADC_IRQHandler+0x218>
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d012      	beq.n	80012be <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	f043 0202 	orr.w	r2, r3, #2
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f06f 0220 	mvn.w	r2, #32
 80012ac:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f912 	bl	80014d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f06f 0220 	mvn.w	r2, #32
 80012bc:	601a      	str	r2, [r3, #0]
  }
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Start_DMA+0x22>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e0d0      	b.n	800148c <HAL_ADC_Start_DMA+0x1c4>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d018      	beq.n	8001332 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001310:	4b60      	ldr	r3, [pc, #384]	@ (8001494 <HAL_ADC_Start_DMA+0x1cc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a60      	ldr	r2, [pc, #384]	@ (8001498 <HAL_ADC_Start_DMA+0x1d0>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0c9a      	lsrs	r2, r3, #18
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001324:	e002      	b.n	800132c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3b01      	subs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001340:	d107      	bne.n	8001352 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001350:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	f040 8088 	bne.w	8001472 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800138c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013a0:	d106      	bne.n	80013b0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f023 0206 	bic.w	r2, r3, #6
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80013ae:	e002      	b.n	80013b6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HAL_ADC_Start_DMA+0x1d4>)
 80013c0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c6:	4a36      	ldr	r2, [pc, #216]	@ (80014a0 <HAL_ADC_Start_DMA+0x1d8>)
 80013c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ce:	4a35      	ldr	r2, [pc, #212]	@ (80014a4 <HAL_ADC_Start_DMA+0x1dc>)
 80013d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d6:	4a34      	ldr	r2, [pc, #208]	@ (80014a8 <HAL_ADC_Start_DMA+0x1e0>)
 80013d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80013f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001402:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	334c      	adds	r3, #76	@ 0x4c
 800140e:	4619      	mov	r1, r3
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f000 fce4 	bl	8001de0 <HAL_DMA_Start_IT>
 8001418:	4603      	mov	r3, r0
 800141a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10f      	bne.n	8001448 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d129      	bne.n	800148a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	e020      	b.n	800148a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <HAL_ADC_Start_DMA+0x1e4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d11b      	bne.n	800148a <HAL_ADC_Start_DMA+0x1c2>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d114      	bne.n	800148a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e00b      	b.n	800148a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f043 0210 	orr.w	r2, r3, #16
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800148a:	7ffb      	ldrb	r3, [r7, #31]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000020 	.word	0x20000020
 8001498:	431bde83 	.word	0x431bde83
 800149c:	40012300 	.word	0x40012300
 80014a0:	08001949 	.word	0x08001949
 80014a4:	08001a03 	.word	0x08001a03
 80014a8:	08001a1f 	.word	0x08001a1f
 80014ac:	40012000 	.word	0x40012000

080014b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1c>
 8001504:	2302      	movs	r3, #2
 8001506:	e113      	b.n	8001730 <HAL_ADC_ConfigChannel+0x244>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b09      	cmp	r3, #9
 8001516:	d925      	bls.n	8001564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68d9      	ldr	r1, [r3, #12]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3b1e      	subs	r3, #30
 800152e:	2207      	movs	r2, #7
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43da      	mvns	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	400a      	ands	r2, r1
 800153c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68d9      	ldr	r1, [r3, #12]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	4603      	mov	r3, r0
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4403      	add	r3, r0
 8001556:	3b1e      	subs	r3, #30
 8001558:	409a      	lsls	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	e022      	b.n	80015aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6919      	ldr	r1, [r3, #16]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	2207      	movs	r2, #7
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6919      	ldr	r1, [r3, #16]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	4603      	mov	r3, r0
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4403      	add	r3, r0
 80015a0:	409a      	lsls	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d824      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b05      	subs	r3, #5
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b05      	subs	r3, #5
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80015fa:	e04c      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d824      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b23      	subs	r3, #35	@ 0x23
 8001616:	221f      	movs	r2, #31
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43da      	mvns	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b23      	subs	r3, #35	@ 0x23
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
 800164c:	e023      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b41      	subs	r3, #65	@ 0x41
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b41      	subs	r3, #65	@ 0x41
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001696:	4b29      	ldr	r3, [pc, #164]	@ (800173c <HAL_ADC_ConfigChannel+0x250>)
 8001698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a28      	ldr	r2, [pc, #160]	@ (8001740 <HAL_ADC_ConfigChannel+0x254>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d10f      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1d8>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d10b      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001740 <HAL_ADC_ConfigChannel+0x254>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x23a>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <HAL_ADC_ConfigChannel+0x258>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d003      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0x1f4>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b11      	cmp	r3, #17
 80016de:	d122      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_ADC_ConfigChannel+0x258>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d111      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_ADC_ConfigChannel+0x25c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a11      	ldr	r2, [pc, #68]	@ (800174c <HAL_ADC_ConfigChannel+0x260>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0c9a      	lsrs	r2, r3, #18
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001718:	e002      	b.n	8001720 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3b01      	subs	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40012300 	.word	0x40012300
 8001740:	40012000 	.word	0x40012000
 8001744:	10000012 	.word	0x10000012
 8001748:	20000020 	.word	0x20000020
 800174c:	431bde83 	.word	0x431bde83

08001750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001758:	4b79      	ldr	r3, [pc, #484]	@ (8001940 <ADC_Init+0x1f0>)
 800175a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	431a      	orrs	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	021a      	lsls	r2, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e2:	4a58      	ldr	r2, [pc, #352]	@ (8001944 <ADC_Init+0x1f4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d022      	beq.n	800182e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	e00f      	b.n	800184e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800183c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800184c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0202 	bic.w	r2, r2, #2
 800185c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6899      	ldr	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e1b      	ldrb	r3, [r3, #24]
 8001868:	005a      	lsls	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01b      	beq.n	80018b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800188a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800189a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	3b01      	subs	r3, #1
 80018a8:	035a      	lsls	r2, r3, #13
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	e007      	b.n	80018c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	3b01      	subs	r3, #1
 80018e0:	051a      	lsls	r2, r3, #20
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001906:	025a      	lsls	r2, r3, #9
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800191e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	029a      	lsls	r2, r3, #10
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40012300 	.word	0x40012300
 8001944:	0f000001 	.word	0x0f000001

08001948 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001954:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800195e:	2b00      	cmp	r3, #0
 8001960:	d13c      	bne.n	80019dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d12b      	bne.n	80019d4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001980:	2b00      	cmp	r3, #0
 8001982:	d127      	bne.n	80019d4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800199c:	2b00      	cmp	r3, #0
 800199e:	d119      	bne.n	80019d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0220 	bic.w	r2, r2, #32
 80019ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7fe fd95 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019da:	e00e      	b.n	80019fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff fd75 	bl	80014d8 <HAL_ADC_ErrorCallback>
}
 80019ee:	e004      	b.n	80019fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff fd4d 	bl	80014b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f043 0204 	orr.w	r2, r3, #4
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff fd4a 	bl	80014d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	@ (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff29 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff3e 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff31 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa2 	bl	8001bbc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff f996 	bl	8000fc0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e099      	b.n	8001dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc0:	e00f      	b.n	8001ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc2:	f7ff f97d 	bl	8000fc0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d908      	bls.n	8001ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e078      	b.n	8001dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e8      	bne.n	8001cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4b38      	ldr	r3, [pc, #224]	@ (8001ddc <HAL_DMA_Init+0x158>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d107      	bne.n	8001d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	4313      	orrs	r3, r2
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f023 0307 	bic.w	r3, r3, #7
 8001d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d117      	bne.n	8001da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fa6f 	bl	800226c <DMA_CheckFifoParam>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2240      	movs	r2, #64	@ 0x40
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001da2:	2301      	movs	r3, #1
 8001da4:	e016      	b.n	8001dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fa26 	bl	8002200 <DMA_CalcBaseAndBitshift>
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	223f      	movs	r2, #63	@ 0x3f
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	f010803f 	.word	0xf010803f

08001de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_DMA_Start_IT+0x26>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e040      	b.n	8001e88 <HAL_DMA_Start_IT+0xa8>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12f      	bne.n	8001e7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f9b8 	bl	80021a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e38:	223f      	movs	r2, #63	@ 0x3f
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0216 	orr.w	r2, r2, #22
 8001e4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0208 	orr.w	r2, r2, #8
 8001e66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e005      	b.n	8001e86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80020d8 <HAL_DMA_IRQHandler+0x248>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a8e      	ldr	r2, [pc, #568]	@ (80020dc <HAL_DMA_IRQHandler+0x24c>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0a9b      	lsrs	r3, r3, #10
 8001ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	2208      	movs	r2, #8
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01a      	beq.n	8001efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2208      	movs	r2, #8
 8001eea:	409a      	lsls	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	2201      	movs	r2, #1
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	2204      	movs	r2, #4
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d012      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00b      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	2204      	movs	r2, #4
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d043      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03c      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d018      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d108      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d024      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
 8001fbe:	e01f      	b.n	8002000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	e016      	b.n	8002000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0208 	bic.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	2220      	movs	r2, #32
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 808f 	beq.w	8002130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8087 	beq.w	8002130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	2220      	movs	r2, #32
 8002028:	409a      	lsls	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b05      	cmp	r3, #5
 8002038:	d136      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0216 	bic.w	r2, r2, #22
 8002048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_DMA_IRQHandler+0x1da>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0208 	bic.w	r2, r2, #8
 8002078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	223f      	movs	r2, #63	@ 0x3f
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07e      	beq.n	800219c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
        }
        return;
 80020a6:	e079      	b.n	800219c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01d      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
 80020d4:	e02c      	b.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
 80020d6:	bf00      	nop
 80020d8:	20000020 	.word	0x20000020
 80020dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d023      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e01e      	b.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10f      	bne.n	8002120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0210 	bic.w	r2, r2, #16
 800210e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002134:	2b00      	cmp	r3, #0
 8002136:	d032      	beq.n	800219e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d022      	beq.n	800218a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2205      	movs	r2, #5
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	d307      	bcc.n	8002178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f2      	bne.n	800215c <HAL_DMA_IRQHandler+0x2cc>
 8002176:	e000      	b.n	800217a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e000      	b.n	800219e <HAL_DMA_IRQHandler+0x30e>
        return;
 800219c:	bf00      	nop
    }
  }
}
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b40      	cmp	r3, #64	@ 0x40
 80021d0:	d108      	bne.n	80021e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021e2:	e007      	b.n	80021f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3b10      	subs	r3, #16
 8002210:	4a14      	ldr	r2, [pc, #80]	@ (8002264 <DMA_CalcBaseAndBitshift+0x64>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800221a:	4a13      	ldr	r2, [pc, #76]	@ (8002268 <DMA_CalcBaseAndBitshift+0x68>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d909      	bls.n	8002242 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002240:	e007      	b.n	8002252 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	aaaaaaab 	.word	0xaaaaaaab
 8002268:	08008d24 	.word	0x08008d24

0800226c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11f      	bne.n	80022c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d856      	bhi.n	800233a <DMA_CheckFifoParam+0xce>
 800228c:	a201      	add	r2, pc, #4	@ (adr r2, 8002294 <DMA_CheckFifoParam+0x28>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022b7 	.word	0x080022b7
 800229c:	080022a5 	.word	0x080022a5
 80022a0:	0800233b 	.word	0x0800233b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d046      	beq.n	800233e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e043      	b.n	800233e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022be:	d140      	bne.n	8002342 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c4:	e03d      	b.n	8002342 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ce:	d121      	bne.n	8002314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d837      	bhi.n	8002346 <DMA_CheckFifoParam+0xda>
 80022d6:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <DMA_CheckFifoParam+0x70>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022f3 	.word	0x080022f3
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002305 	.word	0x08002305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e030      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d025      	beq.n	800234a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002302:	e022      	b.n	800234a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800230c:	d11f      	bne.n	800234e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002312:	e01c      	b.n	800234e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d903      	bls.n	8002322 <DMA_CheckFifoParam+0xb6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002320:	e018      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      break;
 8002326:	e015      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00e      	beq.n	8002352 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e00b      	b.n	8002352 <DMA_CheckFifoParam+0xe6>
      break;
 800233a:	bf00      	nop
 800233c:	e00a      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
 8002340:	e008      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002342:	bf00      	nop
 8002344:	e006      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e004      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e002      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;   
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
    }
  } 
  
  return status; 
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a56      	ldr	r2, [pc, #344]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a48      	ldr	r2, [pc, #288]	@ (8002658 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	@ (800265c <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	@ (8002664 <HAL_GPIO_Init+0x300>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	@ 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e001      	b.n	800268e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e101      	b.n	80028b2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f005 ffc7 	bl	800865c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2203      	movs	r2, #3
 80026d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026dc:	d102      	bne.n	80026e4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 fd22 	bl	8005132 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7c1a      	ldrb	r2, [r3, #16]
 80026f6:	f88d 2000 	strb.w	r2, [sp]
 80026fa:	3304      	adds	r3, #4
 80026fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026fe:	f002 fc01 	bl	8004f04 <USB_CoreInit>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0ce      	b.n	80028b2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fd1a 	bl	8005154 <USB_SetCurrentMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0bf      	b.n	80028b2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e04a      	b.n	80027ce <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3315      	adds	r3, #21
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3314      	adds	r3, #20
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	b298      	uxth	r0, r3
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	332e      	adds	r3, #46	@ 0x2e
 8002774:	4602      	mov	r2, r0
 8002776:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3318      	adds	r3, #24
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	331c      	adds	r3, #28
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	3320      	adds	r3, #32
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	3324      	adds	r3, #36	@ 0x24
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	3301      	adds	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	791b      	ldrb	r3, [r3, #4]
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d3af      	bcc.n	8002738 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e044      	b.n	8002868 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	3301      	adds	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	791b      	ldrb	r3, [r3, #4]
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	429a      	cmp	r2, r3
 8002870:	d3b5      	bcc.n	80027de <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7c1a      	ldrb	r2, [r3, #16]
 800287a:	f88d 2000 	strb.w	r2, [sp]
 800287e:	3304      	adds	r3, #4
 8002880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002882:	f002 fcb3 	bl	80051ec <USB_DevInit>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e00c      	b.n	80028b2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fcfd 	bl	80062aa <USB_DevDisconnect>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_PCD_Start+0x1c>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e022      	b.n	800291c <HAL_PCD_Start+0x62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fc04 	bl	8005110 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fcab 	bl	8006268 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b08d      	sub	sp, #52	@ 0x34
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fd69 	bl	8006412 <USB_GetMode>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 848c 	bne.w	8003260 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f003 fccd 	bl	80062ec <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8482 	beq.w	800325e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fcba 	bl	80062ec <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f002 0202 	and.w	r2, r2, #2
 8002990:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fca8 	bl	80062ec <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d161      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0210 	bic.w	r2, r2, #16
 80029b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 020f 	and.w	r2, r3, #15
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80029dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029e0:	d124      	bne.n	8002a2c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d035      	beq.n	8002a5a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6a38      	ldr	r0, [r7, #32]
 8002a02:	f003 fadf 	bl	8005fc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a12:	441a      	add	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a24:	441a      	add	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	e016      	b.n	8002a5a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002a32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a36:	d110      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a3e:	2208      	movs	r2, #8
 8002a40:	4619      	mov	r1, r3
 8002a42:	6a38      	ldr	r0, [r7, #32]
 8002a44:	f003 fabe 	bl	8005fc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a54:	441a      	add	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0210 	orr.w	r2, r2, #16
 8002a68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fc3c 	bl	80062ec <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a7e:	f040 80a7 	bne.w	8002bd0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fc41 	bl	8006312 <USB_ReadDevAllOutEpInterrupt>
 8002a90:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a92:	e099      	b.n	8002bc8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 808e 	beq.w	8002bbc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fc65 	bl	800637a <USB_ReadDevOutEPInterrupt>
 8002ab0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2301      	movs	r3, #1
 8002acc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fe8b 	bl	80037ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aec:	461a      	mov	r2, r3
 8002aee:	2308      	movs	r3, #8
 8002af0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002af2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 ff61 	bl	80039bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	2310      	movs	r3, #16
 8002b14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d030      	beq.n	8002b82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b28:	2b80      	cmp	r3, #128	@ 0x80
 8002b2a:	d109      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	78db      	ldrb	r3, [r3, #3]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d108      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f005 fe72 	bl	8008854 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2302      	movs	r3, #2
 8002b80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f47f af62 	bne.w	8002a94 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fb89 	bl	80062ec <USB_ReadInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002be4:	f040 80db 	bne.w	8002d9e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fbaa 	bl	8006346 <USB_ReadDevAllInEpInterrupt>
 8002bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bf8:	e0cd      	b.n	8002d96 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80c2 	beq.w	8002d8a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 fbd0 	bl	80063b6 <USB_ReadDevInEPInterrupt>
 8002c16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d057      	beq.n	8002cd2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	2201      	movs	r2, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69f9      	ldr	r1, [r7, #28]
 8002c3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c42:	4013      	ands	r3, r2
 8002c44:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	2301      	movs	r3, #1
 8002c56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	799b      	ldrb	r3, [r3, #6]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d132      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3320      	adds	r3, #32
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4403      	add	r3, r0
 8002c80:	331c      	adds	r3, #28
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4419      	add	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4403      	add	r3, r0
 8002c94:	3320      	adds	r3, #32
 8002c96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d113      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x3a2>
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3324      	adds	r3, #36	@ 0x24
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d108      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	f003 fbd7 	bl	8006474 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f005 fd46 	bl	800875e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2308      	movs	r3, #8
 8002cec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d04:	461a      	mov	r2, r3
 8002d06:	2310      	movs	r3, #16
 8002d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d20:	461a      	mov	r2, r3
 8002d22:	2340      	movs	r3, #64	@ 0x40
 8002d24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d023      	beq.n	8002d78 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d32:	6a38      	ldr	r0, [r7, #32]
 8002d34:	f002 fbbe 	bl	80054b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3310      	adds	r3, #16
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	78db      	ldrb	r3, [r3, #3]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d108      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2200      	movs	r2, #0
 8002d58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 fd89 	bl	8008878 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d72:	461a      	mov	r2, r3
 8002d74:	2302      	movs	r3, #2
 8002d76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fca5 	bl	80036d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f af2e 	bne.w	8002bfa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 faa2 	bl	80062ec <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002db2:	d122      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d108      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fe8b 	bl	8003af8 <HAL_PCDEx_LPM_Callback>
 8002de2:	e002      	b.n	8002dea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f005 fd27 	bl	8008838 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 fa74 	bl	80062ec <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0e:	d112      	bne.n	8002e36 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f005 fce3 	bl	80087ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e34:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fa56 	bl	80062ec <USB_ReadInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4a:	f040 80b7 	bne.w	8002fbc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2110      	movs	r1, #16
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fb23 	bl	80054b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e72:	e046      	b.n	8002f02 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e80:	461a      	mov	r2, r3
 8002e82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e98:	0151      	lsls	r1, r2, #5
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	440a      	add	r2, r1
 8002e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ea2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ea6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002eba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ed6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002eda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eec:	0151      	lsls	r1, r2, #5
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	440a      	add	r2, r1
 8002ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ef6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002efa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efe:	3301      	adds	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	791b      	ldrb	r3, [r3, #4]
 8002f06:	461a      	mov	r2, r3
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d3b2      	bcc.n	8002e74 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f1c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7bdb      	ldrb	r3, [r3, #15]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f3a:	f043 030b 	orr.w	r3, r3, #11
 8002f3e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f50:	f043 030b 	orr.w	r3, r3, #11
 8002f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f56:	e015      	b.n	8002f84 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f6a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f7e:	f043 030b 	orr.w	r3, r3, #11
 8002f82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f003 fa64 	bl	8006474 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f003 f993 	bl	80062ec <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd0:	d123      	bne.n	800301a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fa29 	bl	800642e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 fae0 	bl	80055a6 <USB_GetDevSpeed>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681c      	ldr	r4, [r3, #0]
 8002ff2:	f001 f9b1 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8002ff6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4620      	mov	r0, r4
 8003000:	f001 ffe4 	bl	8004fcc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 fbd2 	bl	80087ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003018:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f003 f964 	bl	80062ec <USB_ReadInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d10a      	bne.n	8003044 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f005 fbaf 	bl	8008792 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f002 0208 	and.w	r2, r2, #8
 8003042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 f94f 	bl	80062ec <USB_ReadInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003054:	2b80      	cmp	r3, #128	@ 0x80
 8003056:	d123      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	e014      	b.n	8003094 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 faf2 	bl	8003672 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	3301      	adds	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	791b      	ldrb	r3, [r3, #4]
 8003098:	461a      	mov	r2, r3
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	4293      	cmp	r3, r2
 800309e:	d3e4      	bcc.n	800306a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 f921 	bl	80062ec <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030b4:	d13c      	bne.n	8003130 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b6:	2301      	movs	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ba:	e02b      	b.n	8003114 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3318      	adds	r3, #24
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d115      	bne.n	800310e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da12      	bge.n	800310e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3317      	adds	r3, #23
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fab2 	bl	8003672 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	791b      	ldrb	r3, [r3, #4]
 8003118:	461a      	mov	r2, r3
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	4293      	cmp	r3, r2
 800311e:	d3cd      	bcc.n	80030bc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800312e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 f8d9 	bl	80062ec <USB_ReadInterrupts>
 800313a:	4603      	mov	r3, r0
 800313c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003140:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003144:	d156      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003146:	2301      	movs	r3, #1
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
 800314a:	e045      	b.n	80031d8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d12e      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003174:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003176:	2b00      	cmp	r3, #0
 8003178:	da2b      	bge.n	80031d2 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	0c1a      	lsrs	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003184:	4053      	eors	r3, r2
 8003186:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800318a:	2b00      	cmp	r3, #0
 800318c:	d121      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ce:	6053      	str	r3, [r2, #4]
            break;
 80031d0:	e008      	b.n	80031e4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	3301      	adds	r3, #1
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	791b      	ldrb	r3, [r3, #4]
 80031dc:	461a      	mov	r2, r3
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d3b3      	bcc.n	800314c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 f877 	bl	80062ec <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003208:	d10a      	bne.n	8003220 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f005 fb46 	bl	800889c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800321e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 f861 	bl	80062ec <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d115      	bne.n	8003260 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f005 fb36 	bl	80088b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	e000      	b.n	8003260 <HAL_PCD_IRQHandler+0x93c>
      return;
 800325e:	bf00      	nop
    }
  }
}
 8003260:	3734      	adds	r7, #52	@ 0x34
 8003262:	46bd      	mov	sp, r7
 8003264:	bd90      	pop	{r4, r7, pc}

08003266 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_PCD_SetAddress+0x1a>
 800327c:	2302      	movs	r3, #2
 800327e:	e012      	b.n	80032a6 <HAL_PCD_SetAddress+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f002 ffc0 	bl	800621c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	4608      	mov	r0, r1
 80032b8:	4611      	mov	r1, r2
 80032ba:	461a      	mov	r2, r3
 80032bc:	4603      	mov	r3, r0
 80032be:	70fb      	strb	r3, [r7, #3]
 80032c0:	460b      	mov	r3, r1
 80032c2:	803b      	strh	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da0f      	bge.n	80032f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 020f 	and.w	r2, r3, #15
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	3310      	adds	r3, #16
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	3304      	adds	r3, #4
 80032ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	705a      	strb	r2, [r3, #1]
 80032f2:	e00f      	b.n	8003314 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 020f 	and.w	r2, r3, #15
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	3304      	adds	r3, #4
 800330c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003320:	883b      	ldrh	r3, [r7, #0]
 8003322:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	78ba      	ldrb	r2, [r7, #2]
 800332e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003342:	78bb      	ldrb	r3, [r7, #2]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d102      	bne.n	800334e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_PCD_EP_Open+0xae>
 8003358:	2302      	movs	r3, #2
 800335a:	e00e      	b.n	800337a <HAL_PCD_EP_Open+0xcc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	f002 f940 	bl	80055f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003378:	7afb      	ldrb	r3, [r7, #11]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800338e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003392:	2b00      	cmp	r3, #0
 8003394:	da0f      	bge.n	80033b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3310      	adds	r3, #16
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	3304      	adds	r3, #4
 80033ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	705a      	strb	r2, [r3, #1]
 80033b4:	e00f      	b.n	80033d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_PCD_EP_Close+0x6e>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e00e      	b.n	800340e <HAL_PCD_EP_Close+0x8c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68f9      	ldr	r1, [r7, #12]
 80033fe:	4618      	mov	r0, r3
 8003400:	f002 f97e 	bl	8005700 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	460b      	mov	r3, r1
 8003424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2200      	movs	r2, #0
 8003456:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003458:	7afb      	ldrb	r3, [r7, #11]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	b2da      	uxtb	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	799b      	ldrb	r3, [r3, #6]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	799b      	ldrb	r3, [r3, #6]
 800347a:	461a      	mov	r2, r3
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	f002 fa1b 	bl	80058b8 <USB_EPStartXfer>

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	460b      	mov	r3, r1
 800349a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349c:	7afb      	ldrb	r3, [r7, #11]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3310      	adds	r3, #16
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2200      	movs	r2, #0
 80034c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	799b      	ldrb	r3, [r3, #6]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	799b      	ldrb	r3, [r3, #6]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6979      	ldr	r1, [r7, #20]
 80034f2:	f002 f9e1 	bl	80058b8 <USB_EPStartXfer>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	7912      	ldrb	r2, [r2, #4]
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e04f      	b.n	80035be <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800351e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da0f      	bge.n	8003546 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3310      	adds	r3, #16
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	705a      	strb	r2, [r3, #1]
 8003544:	e00d      	b.n	8003562 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_PCD_EP_SetStall+0x82>
 800357e:	2302      	movs	r3, #2
 8003580:	e01d      	b.n	80035be <HAL_PCD_EP_SetStall+0xbe>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	4618      	mov	r0, r3
 8003592:	f002 fd6f 	bl	8006074 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7999      	ldrb	r1, [r3, #6]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035ae:	461a      	mov	r2, r3
 80035b0:	f002 ff60 	bl	8006474 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	7912      	ldrb	r2, [r2, #4]
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e042      	b.n	800366a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da0f      	bge.n	800360c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	3310      	adds	r3, #16
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	3304      	adds	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	705a      	strb	r2, [r3, #1]
 800360a:	e00f      	b.n	800362c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_PCD_EP_ClrStall+0x86>
 8003648:	2302      	movs	r3, #2
 800364a:	e00e      	b.n	800366a <HAL_PCD_EP_ClrStall+0xa4>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68f9      	ldr	r1, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	f002 fd78 	bl	8006150 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800367e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003682:	2b00      	cmp	r3, #0
 8003684:	da0c      	bge.n	80036a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3310      	adds	r3, #16
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e00c      	b.n	80036ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	3304      	adds	r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f002 fb97 	bl	8005df4 <USB_EPStopXfer>
 80036c6:	4603      	mov	r3, r0
 80036c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	3310      	adds	r3, #16
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d901      	bls.n	800370c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e06b      	b.n	80037e4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	429a      	cmp	r2, r3
 8003720:	d902      	bls.n	8003728 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	3303      	adds	r3, #3
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003730:	e02a      	b.n	8003788 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	429a      	cmp	r2, r3
 8003746:	d902      	bls.n	800374e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3303      	adds	r3, #3
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68d9      	ldr	r1, [r3, #12]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4603      	mov	r3, r0
 800376a:	6978      	ldr	r0, [r7, #20]
 800376c:	f002 fbec 	bl	8005f48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	441a      	add	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	441a      	add	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	429a      	cmp	r2, r3
 800379c:	d809      	bhi.n	80037b2 <PCD_WriteEmptyTxFifo+0xde>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d203      	bcs.n	80037b2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1bf      	bne.n	8003732 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d811      	bhi.n	80037e2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	2201      	movs	r2, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037de:	4013      	ands	r3, r2
 80037e0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	333c      	adds	r3, #60	@ 0x3c
 8003804:	3304      	adds	r3, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	799b      	ldrb	r3, [r3, #6]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d17b      	bne.n	800391a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4a61      	ldr	r2, [pc, #388]	@ (80039b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f240 80b9 	bls.w	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80b3 	beq.w	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003854:	6093      	str	r3, [r2, #8]
 8003856:	e0a7      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386e:	461a      	mov	r2, r3
 8003870:	2320      	movs	r3, #32
 8003872:	6093      	str	r3, [r2, #8]
 8003874:	e098      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8093 	bne.w	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4a4b      	ldr	r2, [pc, #300]	@ (80039b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d90f      	bls.n	80038aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a0:	461a      	mov	r2, r3
 80038a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038a6:	6093      	str	r3, [r2, #8]
 80038a8:	e07e      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	3304      	adds	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d6:	1ad2      	subs	r2, r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d114      	bne.n	800390c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038f4:	461a      	mov	r2, r3
 80038f6:	2101      	movs	r1, #1
 80038f8:	f002 fdbc 	bl	8006474 <USB_EP0_OutStart>
 80038fc:	e006      	b.n	800390c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f004 ff08 	bl	8008728 <HAL_PCD_DataOutStageCallback>
 8003918:	e046      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d124      	bne.n	800396c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	e032      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	2320      	movs	r3, #32
 800395c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	4619      	mov	r1, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f004 fedf 	bl	8008728 <HAL_PCD_DataOutStageCallback>
 800396a:	e01d      	b.n	80039a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d114      	bne.n	800399c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003994:	461a      	mov	r2, r3
 8003996:	2100      	movs	r1, #0
 8003998:	f002 fd6c 	bl	8006474 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f004 fec0 	bl	8008728 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	4f54300a 	.word	0x4f54300a
 80039b8:	4f54310a 	.word	0x4f54310a

080039bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	333c      	adds	r3, #60	@ 0x3c
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <PCD_EP_OutSetupPacket_int+0x88>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d90e      	bls.n	8003a10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f004 fe77 	bl	8008704 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d90c      	bls.n	8003a38 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	799b      	ldrb	r3, [r3, #6]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a30:	461a      	mov	r2, r3
 8003a32:	2101      	movs	r1, #1
 8003a34:	f002 fd1e 	bl	8006474 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	4f54300a 	.word	0x4f54300a

08003a48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
 8003a54:	4613      	mov	r3, r2
 8003a56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a66:	883b      	ldrh	r3, [r7, #0]
 8003a68:	0419      	lsls	r1, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a74:	e028      	b.n	8003ac8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4413      	add	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e00d      	b.n	8003aa6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	3340      	adds	r3, #64	@ 0x40
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3ec      	bcc.n	8003a8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ab0:	883b      	ldrh	r3, [r7, #0]
 8003ab2:	0418      	lsls	r0, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4302      	orrs	r2, r0
 8003ac0:	3340      	adds	r3, #64	@ 0x40
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e267      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d075      	beq.n	8003c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b2e:	4b88      	ldr	r3, [pc, #544]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d00c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3a:	4b85      	ldr	r3, [pc, #532]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d112      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4b82      	ldr	r3, [pc, #520]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	4b7e      	ldr	r3, [pc, #504]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05b      	beq.n	8003c18 <HAL_RCC_OscConfig+0x108>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d157      	bne.n	8003c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e242      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b74:	d106      	bne.n	8003b84 <HAL_RCC_OscConfig+0x74>
 8003b76:	4b76      	ldr	r3, [pc, #472]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a75      	ldr	r2, [pc, #468]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e01d      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x98>
 8003b8e:	4b70      	ldr	r3, [pc, #448]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6f      	ldr	r2, [pc, #444]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	4b69      	ldr	r3, [pc, #420]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a68      	ldr	r2, [pc, #416]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b66      	ldr	r3, [pc, #408]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a65      	ldr	r2, [pc, #404]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fd f9fa 	bl	8000fc0 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fd f9f6 	bl	8000fc0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	@ 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e207      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xc0>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fd f9e6 	bl	8000fc0 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fd f9e2 	bl	8000fc0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	@ 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1f3      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	4b51      	ldr	r3, [pc, #324]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xe8>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c26:	4b4a      	ldr	r3, [pc, #296]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c32:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b44      	ldr	r3, [pc, #272]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	4b41      	ldr	r3, [pc, #260]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1c7      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4937      	ldr	r1, [pc, #220]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	e03a      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c80:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <HAL_RCC_OscConfig+0x244>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fd f99b 	bl	8000fc0 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7fd f997 	bl	8000fc0 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1a8      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b28      	ldr	r3, [pc, #160]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4925      	ldr	r1, [pc, #148]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_RCC_OscConfig+0x244>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd f97a 	bl	8000fc0 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fd f976 	bl	8000fc0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e187      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d036      	beq.n	8003d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <HAL_RCC_OscConfig+0x248>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fd f95a 	bl	8000fc0 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fd f956 	bl	8000fc0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e167      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_RCC_OscConfig+0x240>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x200>
 8003d2e:	e01b      	b.n	8003d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <HAL_RCC_OscConfig+0x248>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fd f943 	bl	8000fc0 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	e00e      	b.n	8003d5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fd f93f 	bl	8000fc0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d907      	bls.n	8003d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e150      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	42470000 	.word	0x42470000
 8003d58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b88      	ldr	r3, [pc, #544]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ea      	bne.n	8003d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8097 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b81      	ldr	r3, [pc, #516]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d96:	4b7a      	ldr	r3, [pc, #488]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b77      	ldr	r3, [pc, #476]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4b74      	ldr	r3, [pc, #464]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a73      	ldr	r2, [pc, #460]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fd f8ff 	bl	8000fc0 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fd f8fb 	bl	8000fc0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e10c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f84 <HAL_RCC_OscConfig+0x474>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x2ea>
 8003dec:	4b64      	ldr	r3, [pc, #400]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df0:	4a63      	ldr	r2, [pc, #396]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df8:	e01c      	b.n	8003e34 <HAL_RCC_OscConfig+0x324>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x30c>
 8003e02:	4b5f      	ldr	r3, [pc, #380]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4a5e      	ldr	r2, [pc, #376]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a5b      	ldr	r2, [pc, #364]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0x324>
 8003e1c:	4b58      	ldr	r3, [pc, #352]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e20:	4a57      	ldr	r2, [pc, #348]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e28:	4b55      	ldr	r3, [pc, #340]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a54      	ldr	r2, [pc, #336]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fd f8c0 	bl	8000fc0 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd f8bc 	bl	8000fc0 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0cb      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	4b49      	ldr	r3, [pc, #292]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ee      	beq.n	8003e44 <HAL_RCC_OscConfig+0x334>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e68:	f7fd f8aa 	bl	8000fc0 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd f8a6 	bl	8000fc0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0b5      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e86:	4b3e      	ldr	r3, [pc, #248]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ee      	bne.n	8003e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e98:	4b39      	ldr	r3, [pc, #228]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	4a38      	ldr	r2, [pc, #224]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a1 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eae:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d05c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d141      	bne.n	8003f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <HAL_RCC_OscConfig+0x478>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd f87a 	bl	8000fc0 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd f876 	bl	8000fc0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e087      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	491b      	ldr	r1, [pc, #108]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f18:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <HAL_RCC_OscConfig+0x478>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fd f84f 	bl	8000fc0 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fd f84b 	bl	8000fc0 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e05c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f38:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x416>
 8003f44:	e054      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <HAL_RCC_OscConfig+0x478>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd f838 	bl	8000fc0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd f834 	bl	8000fc0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e045      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_RCC_OscConfig+0x470>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x444>
 8003f72:	e03d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e038      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ffc <HAL_RCC_OscConfig+0x4ec>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d028      	beq.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d121      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d11a      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d111      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0cc      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b68      	ldr	r3, [pc, #416]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d90c      	bls.n	800403c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b65      	ldr	r3, [pc, #404]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a58      	ldr	r2, [pc, #352]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800405e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a52      	ldr	r2, [pc, #328]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d044      	beq.n	8004120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d119      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d003      	beq.n	80040be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040be:	4b3f      	ldr	r3, [pc, #252]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e06f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e067      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040de:	4b37      	ldr	r3, [pc, #220]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4934      	ldr	r1, [pc, #208]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f0:	f7fc ff66 	bl	8000fc0 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fc ff62 	bl	8000fc0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e04f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	4b2b      	ldr	r3, [pc, #172]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	429a      	cmp	r2, r3
 800411e:	d1eb      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004120:	4b25      	ldr	r3, [pc, #148]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d20c      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b22      	ldr	r3, [pc, #136]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc fec6 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08008d14 	.word	0x08008d14
 80041c4:	20000020 	.word	0x20000020
 80041c8:	20000024 	.word	0x20000024

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b090      	sub	sp, #64	@ 0x40
 80041d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e4:	4b59      	ldr	r3, [pc, #356]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d00d      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x40>
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	f200 80a1 	bhi.w	8004338 <HAL_RCC_GetSysClockFreq+0x16c>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x34>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x3a>
 80041fe:	e09b      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b53      	ldr	r3, [pc, #332]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x184>)
 8004202:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004204:	e09b      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004206:	4b53      	ldr	r3, [pc, #332]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800420a:	e098      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420c:	4b4f      	ldr	r3, [pc, #316]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004214:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004216:	4b4d      	ldr	r3, [pc, #308]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d028      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004222:	4b4a      	ldr	r3, [pc, #296]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	2200      	movs	r2, #0
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	627a      	str	r2, [r7, #36]	@ 0x24
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004234:	2100      	movs	r1, #0
 8004236:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004238:	fb03 f201 	mul.w	r2, r3, r1
 800423c:	2300      	movs	r3, #0
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	4413      	add	r3, r2
 8004244:	4a43      	ldr	r2, [pc, #268]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004246:	fba0 1202 	umull	r1, r2, r0, r2
 800424a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800424c:	460a      	mov	r2, r1
 800424e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004252:	4413      	add	r3, r2
 8004254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004258:	2200      	movs	r2, #0
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	61fa      	str	r2, [r7, #28]
 800425e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004266:	f7fb ffb7 	bl	80001d8 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4613      	mov	r3, r2
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004272:	e053      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004274:	4b35      	ldr	r3, [pc, #212]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	2200      	movs	r2, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	617a      	str	r2, [r7, #20]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004286:	f04f 0b00 	mov.w	fp, #0
 800428a:	4652      	mov	r2, sl
 800428c:	465b      	mov	r3, fp
 800428e:	f04f 0000 	mov.w	r0, #0
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	0159      	lsls	r1, r3, #5
 8004298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429c:	0150      	lsls	r0, r2, #5
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	ebb2 080a 	subs.w	r8, r2, sl
 80042a6:	eb63 090b 	sbc.w	r9, r3, fp
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042be:	ebb2 0408 	subs.w	r4, r2, r8
 80042c2:	eb63 0509 	sbc.w	r5, r3, r9
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	00eb      	lsls	r3, r5, #3
 80042d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d4:	00e2      	lsls	r2, r4, #3
 80042d6:	4614      	mov	r4, r2
 80042d8:	461d      	mov	r5, r3
 80042da:	eb14 030a 	adds.w	r3, r4, sl
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	eb45 030b 	adc.w	r3, r5, fp
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f2:	4629      	mov	r1, r5
 80042f4:	028b      	lsls	r3, r1, #10
 80042f6:	4621      	mov	r1, r4
 80042f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042fc:	4621      	mov	r1, r4
 80042fe:	028a      	lsls	r2, r1, #10
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	2200      	movs	r2, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	60fa      	str	r2, [r7, #12]
 800430c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004310:	f7fb ff62 	bl	80001d8 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	3301      	adds	r3, #1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800432c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004336:	e002      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x184>)
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800433c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004340:	4618      	mov	r0, r3
 8004342:	3740      	adds	r7, #64	@ 0x40
 8004344:	46bd      	mov	sp, r7
 8004346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	00f42400 	.word	0x00f42400
 8004354:	017d7840 	.word	0x017d7840

08004358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	@ (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000020 	.word	0x20000020

08004370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e041      	b.n	8004406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fcd0 	bl	8000d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f000 fbe0 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d001      	beq.n	8004428 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e03c      	b.n	80044a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1e      	ldr	r2, [pc, #120]	@ (80044b0 <HAL_TIM_Base_Start+0xa0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_TIM_Base_Start+0x5c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004442:	d013      	beq.n	800446c <HAL_TIM_Base_Start+0x5c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1a      	ldr	r2, [pc, #104]	@ (80044b4 <HAL_TIM_Base_Start+0xa4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_TIM_Base_Start+0x5c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a19      	ldr	r2, [pc, #100]	@ (80044b8 <HAL_TIM_Base_Start+0xa8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_Base_Start+0x5c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <HAL_TIM_Base_Start+0xac>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_Base_Start+0x5c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <HAL_TIM_Base_Start+0xb0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d010      	beq.n	80044a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	e007      	b.n	80044a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40014000 	.word	0x40014000

080044c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10f      	bne.n	800450c <HAL_TIM_Base_Stop_IT+0x48>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d107      	bne.n	800450c <HAL_TIM_Base_Stop_IT+0x48>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e097      	b.n	8004666 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fc fb88 	bl	8000c60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f000 fafc 	bl	8004b74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a4:	f023 0303 	bic.w	r3, r3, #3
 80045a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	4313      	orrs	r3, r2
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045c2:	f023 030c 	bic.w	r3, r3, #12
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	4313      	orrs	r3, r2
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	011a      	lsls	r2, r3, #4
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	4313      	orrs	r3, r2
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004600:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004608:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	4313      	orrs	r3, r2
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800467e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004686:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800468e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004696:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d110      	bne.n	80046c0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d102      	bne.n	80046aa <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a4:	7b7b      	ldrb	r3, [r7, #13]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d001      	beq.n	80046ae <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e089      	b.n	80047c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046be:	e031      	b.n	8004724 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d110      	bne.n	80046e8 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d102      	bne.n	80046d2 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046cc:	7b3b      	ldrb	r3, [r7, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e075      	b.n	80047c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046e6:	e01d      	b.n	8004724 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d108      	bne.n	8004700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	7bbb      	ldrb	r3, [r7, #14]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d105      	bne.n	8004700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f4:	7b7b      	ldrb	r3, [r7, #13]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d102      	bne.n	8004700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046fa:	7b3b      	ldrb	r3, [r7, #12]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d001      	beq.n	8004704 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e05e      	b.n	80047c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_Encoder_Start_IT+0xc4>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d010      	beq.n	8004752 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004730:	e01f      	b.n	8004772 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fb3a 	bl	8004db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0202 	orr.w	r2, r2, #2
 800474e:	60da      	str	r2, [r3, #12]
      break;
 8004750:	e02e      	b.n	80047b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2201      	movs	r2, #1
 8004758:	2104      	movs	r1, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fb2a 	bl	8004db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0204 	orr.w	r2, r2, #4
 800476e:	60da      	str	r2, [r3, #12]
      break;
 8004770:	e01e      	b.n	80047b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2201      	movs	r2, #1
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb1a 	bl	8004db4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	2104      	movs	r1, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fb13 	bl	8004db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0202 	orr.w	r2, r2, #2
 800479c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0204 	orr.w	r2, r2, #4
 80047ac:	60da      	str	r2, [r3, #12]
      break;
 80047ae:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01b      	beq.n	800482e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0202 	mvn.w	r2, #2
 80047fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fb fea7 	bl	8000568 <HAL_TIM_IC_CaptureCallback>
 800481a:	e005      	b.n	8004828 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f98b 	bl	8004b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f992 	bl	8004b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01b      	beq.n	800487a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f06f 0204 	mvn.w	r2, #4
 800484a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fb fe81 	bl	8000568 <HAL_TIM_IC_CaptureCallback>
 8004866:	e005      	b.n	8004874 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f965 	bl	8004b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f96c 	bl	8004b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01b      	beq.n	80048c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f06f 0208 	mvn.w	r2, #8
 8004896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2204      	movs	r2, #4
 800489c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fb fe5b 	bl	8000568 <HAL_TIM_IC_CaptureCallback>
 80048b2:	e005      	b.n	80048c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f93f 	bl	8004b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f946 	bl	8004b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01b      	beq.n	8004912 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0210 	mvn.w	r2, #16
 80048e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2208      	movs	r2, #8
 80048e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fb fe35 	bl	8000568 <HAL_TIM_IC_CaptureCallback>
 80048fe:	e005      	b.n	800490c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f919 	bl	8004b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f920 	bl	8004b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0201 	mvn.w	r2, #1
 800492e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fb fe3d 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00c      	beq.n	800495a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 facb 	bl	8004ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00c      	beq.n	800497e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f8f1 	bl	8004b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00c      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f06f 0220 	mvn.w	r2, #32
 800499a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa9d 	bl	8004edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_ConfigClockSource+0x1c>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0b4      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x186>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fe:	d03e      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0xd4>
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a04:	f200 8087 	bhi.w	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0c:	f000 8086 	beq.w	8004b1c <HAL_TIM_ConfigClockSource+0x172>
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a14:	d87f      	bhi.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a16:	2b70      	cmp	r3, #112	@ 0x70
 8004a18:	d01a      	beq.n	8004a50 <HAL_TIM_ConfigClockSource+0xa6>
 8004a1a:	2b70      	cmp	r3, #112	@ 0x70
 8004a1c:	d87b      	bhi.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1e:	2b60      	cmp	r3, #96	@ 0x60
 8004a20:	d050      	beq.n	8004ac4 <HAL_TIM_ConfigClockSource+0x11a>
 8004a22:	2b60      	cmp	r3, #96	@ 0x60
 8004a24:	d877      	bhi.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a26:	2b50      	cmp	r3, #80	@ 0x50
 8004a28:	d03c      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0xfa>
 8004a2a:	2b50      	cmp	r3, #80	@ 0x50
 8004a2c:	d873      	bhi.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2e:	2b40      	cmp	r3, #64	@ 0x40
 8004a30:	d058      	beq.n	8004ae4 <HAL_TIM_ConfigClockSource+0x13a>
 8004a32:	2b40      	cmp	r3, #64	@ 0x40
 8004a34:	d86f      	bhi.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a36:	2b30      	cmp	r3, #48	@ 0x30
 8004a38:	d064      	beq.n	8004b04 <HAL_TIM_ConfigClockSource+0x15a>
 8004a3a:	2b30      	cmp	r3, #48	@ 0x30
 8004a3c:	d86b      	bhi.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d060      	beq.n	8004b04 <HAL_TIM_ConfigClockSource+0x15a>
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d867      	bhi.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d05c      	beq.n	8004b04 <HAL_TIM_ConfigClockSource+0x15a>
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d05a      	beq.n	8004b04 <HAL_TIM_ConfigClockSource+0x15a>
 8004a4e:	e062      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a60:	f000 f988 	bl	8004d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
      break;
 8004a7c:	e04f      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a8e:	f000 f971 	bl	8004d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa0:	609a      	str	r2, [r3, #8]
      break;
 8004aa2:	e03c      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f000 f8e5 	bl	8004c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2150      	movs	r1, #80	@ 0x50
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f93e 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004ac2:	e02c      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f000 f904 	bl	8004cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2160      	movs	r1, #96	@ 0x60
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f92e 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004ae2:	e01c      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af0:	461a      	mov	r2, r3
 8004af2:	f000 f8c5 	bl	8004c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2140      	movs	r1, #64	@ 0x40
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f91e 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004b02:	e00c      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 f915 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004b14:	e003      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1a:	e000      	b.n	8004b1e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a37      	ldr	r2, [pc, #220]	@ (8004c64 <TIM_Base_SetConfig+0xf0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a34      	ldr	r2, [pc, #208]	@ (8004c68 <TIM_Base_SetConfig+0xf4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <TIM_Base_SetConfig+0xf8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a32      	ldr	r2, [pc, #200]	@ (8004c70 <TIM_Base_SetConfig+0xfc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a28      	ldr	r2, [pc, #160]	@ (8004c64 <TIM_Base_SetConfig+0xf0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01b      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bcc:	d017      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a25      	ldr	r2, [pc, #148]	@ (8004c68 <TIM_Base_SetConfig+0xf4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	@ (8004c6c <TIM_Base_SetConfig+0xf8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <TIM_Base_SetConfig+0xfc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a22      	ldr	r2, [pc, #136]	@ (8004c74 <TIM_Base_SetConfig+0x100>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a21      	ldr	r2, [pc, #132]	@ (8004c78 <TIM_Base_SetConfig+0x104>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a20      	ldr	r2, [pc, #128]	@ (8004c7c <TIM_Base_SetConfig+0x108>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a0c      	ldr	r2, [pc, #48]	@ (8004c64 <TIM_Base_SetConfig+0xf0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d103      	bne.n	8004c3e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f043 0204 	orr.w	r2, r3, #4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800

08004c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 030a 	bic.w	r3, r3, #10
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f023 0210 	bic.w	r2, r3, #16
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	031b      	lsls	r3, r3, #12
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f043 0307 	orr.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e050      	b.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d018      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d013      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a18      	ldr	r2, [pc, #96]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a16      	ldr	r2, [pc, #88]	@ (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a13      	ldr	r2, [pc, #76]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40014000 	.word	0x40014000

08004edc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f04:	b084      	sub	sp, #16
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	f107 001c 	add.w	r0, r7, #28
 8004f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d123      	bne.n	8004f66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f001 fae8 	bl	8006530 <USB_CoreReset>
 8004f60:	4603      	mov	r3, r0
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e01b      	b.n	8004f9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f001 fadc 	bl	8006530 <USB_CoreReset>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f90:	e005      	b.n	8004f9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f9e:	7fbb      	ldrb	r3, [r7, #30]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10b      	bne.n	8004fbc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f043 0206 	orr.w	r2, r3, #6
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc8:	b004      	add	sp, #16
 8004fca:	4770      	bx	lr

08004fcc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d165      	bne.n	80050ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4a41      	ldr	r2, [pc, #260]	@ (80050e8 <USB_SetTurnaroundTime+0x11c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d906      	bls.n	8004ff6 <USB_SetTurnaroundTime+0x2a>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4a40      	ldr	r2, [pc, #256]	@ (80050ec <USB_SetTurnaroundTime+0x120>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d202      	bcs.n	8004ff6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e062      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80050ec <USB_SetTurnaroundTime+0x120>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d306      	bcc.n	800500c <USB_SetTurnaroundTime+0x40>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4a3b      	ldr	r2, [pc, #236]	@ (80050f0 <USB_SetTurnaroundTime+0x124>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d202      	bcs.n	800500c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005006:	230e      	movs	r3, #14
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	e057      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4a38      	ldr	r2, [pc, #224]	@ (80050f0 <USB_SetTurnaroundTime+0x124>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d306      	bcc.n	8005022 <USB_SetTurnaroundTime+0x56>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4a37      	ldr	r2, [pc, #220]	@ (80050f4 <USB_SetTurnaroundTime+0x128>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d202      	bcs.n	8005022 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800501c:	230d      	movs	r3, #13
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e04c      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4a33      	ldr	r2, [pc, #204]	@ (80050f4 <USB_SetTurnaroundTime+0x128>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d306      	bcc.n	8005038 <USB_SetTurnaroundTime+0x6c>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4a32      	ldr	r2, [pc, #200]	@ (80050f8 <USB_SetTurnaroundTime+0x12c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d802      	bhi.n	8005038 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005032:	230c      	movs	r3, #12
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e041      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4a2f      	ldr	r2, [pc, #188]	@ (80050f8 <USB_SetTurnaroundTime+0x12c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d906      	bls.n	800504e <USB_SetTurnaroundTime+0x82>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4a2e      	ldr	r2, [pc, #184]	@ (80050fc <USB_SetTurnaroundTime+0x130>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d802      	bhi.n	800504e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005048:	230b      	movs	r3, #11
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e036      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4a2a      	ldr	r2, [pc, #168]	@ (80050fc <USB_SetTurnaroundTime+0x130>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d906      	bls.n	8005064 <USB_SetTurnaroundTime+0x98>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a29      	ldr	r2, [pc, #164]	@ (8005100 <USB_SetTurnaroundTime+0x134>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d802      	bhi.n	8005064 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800505e:	230a      	movs	r3, #10
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e02b      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <USB_SetTurnaroundTime+0x134>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d906      	bls.n	800507a <USB_SetTurnaroundTime+0xae>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a25      	ldr	r2, [pc, #148]	@ (8005104 <USB_SetTurnaroundTime+0x138>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d202      	bcs.n	800507a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005074:	2309      	movs	r3, #9
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e020      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4a21      	ldr	r2, [pc, #132]	@ (8005104 <USB_SetTurnaroundTime+0x138>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d306      	bcc.n	8005090 <USB_SetTurnaroundTime+0xc4>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a20      	ldr	r2, [pc, #128]	@ (8005108 <USB_SetTurnaroundTime+0x13c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d802      	bhi.n	8005090 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800508a:	2308      	movs	r3, #8
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e015      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a1d      	ldr	r2, [pc, #116]	@ (8005108 <USB_SetTurnaroundTime+0x13c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d906      	bls.n	80050a6 <USB_SetTurnaroundTime+0xda>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <USB_SetTurnaroundTime+0x140>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d202      	bcs.n	80050a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050a0:	2307      	movs	r3, #7
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e00a      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050a6:	2306      	movs	r3, #6
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e007      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050b2:	2309      	movs	r3, #9
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e001      	b.n	80050bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050b8:	2309      	movs	r3, #9
 80050ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	029b      	lsls	r3, r3, #10
 80050d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	00d8acbf 	.word	0x00d8acbf
 80050ec:	00e4e1c0 	.word	0x00e4e1c0
 80050f0:	00f42400 	.word	0x00f42400
 80050f4:	01067380 	.word	0x01067380
 80050f8:	011a499f 	.word	0x011a499f
 80050fc:	01312cff 	.word	0x01312cff
 8005100:	014ca43f 	.word	0x014ca43f
 8005104:	016e3600 	.word	0x016e3600
 8005108:	01a6ab1f 	.word	0x01a6ab1f
 800510c:	01e84800 	.word	0x01e84800

08005110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f043 0201 	orr.w	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d115      	bne.n	80051a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005182:	200a      	movs	r0, #10
 8005184:	f7fb ff28 	bl	8000fd8 <HAL_Delay>
      ms += 10U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	330a      	adds	r3, #10
 800518c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 f93f 	bl	8006412 <USB_GetMode>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d01e      	beq.n	80051d8 <USB_SetCurrentMode+0x84>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2bc7      	cmp	r3, #199	@ 0xc7
 800519e:	d9f0      	bls.n	8005182 <USB_SetCurrentMode+0x2e>
 80051a0:	e01a      	b.n	80051d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d115      	bne.n	80051d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051b4:	200a      	movs	r0, #10
 80051b6:	f7fb ff0f 	bl	8000fd8 <HAL_Delay>
      ms += 10U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	330a      	adds	r3, #10
 80051be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 f926 	bl	8006412 <USB_GetMode>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <USB_SetCurrentMode+0x84>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80051d0:	d9f0      	bls.n	80051b4 <USB_SetCurrentMode+0x60>
 80051d2:	e001      	b.n	80051d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e005      	b.n	80051e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2bc8      	cmp	r3, #200	@ 0xc8
 80051dc:	d101      	bne.n	80051e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051ec:	b084      	sub	sp, #16
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80051fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	e009      	b.n	8005220 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	3340      	adds	r3, #64	@ 0x40
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3301      	adds	r3, #1
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b0e      	cmp	r3, #14
 8005224:	d9f2      	bls.n	800520c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005226:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800522a:	2b00      	cmp	r3, #0
 800522c:	d11c      	bne.n	8005268 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005246:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	@ 0x38
 8005266:	e00b      	b.n	8005280 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005278:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005286:	461a      	mov	r2, r3
 8005288:	2300      	movs	r3, #0
 800528a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800528c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10d      	bne.n	80052b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f968 	bl	8005574 <USB_SetDevSpeed>
 80052a4:	e008      	b.n	80052b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052a6:	2101      	movs	r1, #1
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f963 	bl	8005574 <USB_SetDevSpeed>
 80052ae:	e003      	b.n	80052b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052b0:	2103      	movs	r1, #3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f95e 	bl	8005574 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052b8:	2110      	movs	r1, #16
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8fa 	bl	80054b4 <USB_FlushTxFifo>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f924 	bl	8005518 <USB_FlushRxFifo>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ec:	461a      	mov	r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f8:	461a      	mov	r2, r3
 80052fa:	2300      	movs	r3, #0
 80052fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	e043      	b.n	800538c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800531a:	d118      	bne.n	800534e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532e:	461a      	mov	r2, r3
 8005330:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e013      	b.n	8005360 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005344:	461a      	mov	r2, r3
 8005346:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	e008      	b.n	8005360 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535a:	461a      	mov	r2, r3
 800535c:	2300      	movs	r3, #0
 800535e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536c:	461a      	mov	r2, r3
 800536e:	2300      	movs	r3, #0
 8005370:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	461a      	mov	r2, r3
 8005380:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3301      	adds	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005390:	461a      	mov	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4293      	cmp	r3, r2
 8005396:	d3b5      	bcc.n	8005304 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e043      	b.n	8005426 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b4:	d118      	bne.n	80053e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c8:	461a      	mov	r2, r3
 80053ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e013      	b.n	80053fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053de:	461a      	mov	r2, r3
 80053e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e008      	b.n	80053fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005406:	461a      	mov	r2, r3
 8005408:	2300      	movs	r3, #0
 800540a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800541e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	3301      	adds	r3, #1
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800542a:	461a      	mov	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4293      	cmp	r3, r2
 8005430:	d3b5      	bcc.n	800539e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005444:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005452:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f043 0210 	orr.w	r2, r3, #16
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <USB_DevInit+0x2c4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005474:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f043 0208 	orr.w	r2, r3, #8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005488:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005498:	f043 0304 	orr.w	r3, r3, #4
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ac:	b004      	add	sp, #16
 80054ae:	4770      	bx	lr
 80054b0:	803c3800 	.word	0x803c3800

080054b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3301      	adds	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054ce:	d901      	bls.n	80054d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e01b      	b.n	800550c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	daf2      	bge.n	80054c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	019b      	lsls	r3, r3, #6
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054f8:	d901      	bls.n	80054fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e006      	b.n	800550c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b20      	cmp	r3, #32
 8005508:	d0f0      	beq.n	80054ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005530:	d901      	bls.n	8005536 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e018      	b.n	8005568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	daf2      	bge.n	8005524 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2210      	movs	r2, #16
 8005546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005554:	d901      	bls.n	800555a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e006      	b.n	8005568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b10      	cmp	r3, #16
 8005564:	d0f0      	beq.n	8005548 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0306 	and.w	r3, r3, #6
 80055be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]
 80055ca:	e00a      	b.n	80055e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d002      	beq.n	80055d8 <USB_GetDevSpeed+0x32>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b06      	cmp	r3, #6
 80055d6:	d102      	bne.n	80055de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055d8:	2302      	movs	r3, #2
 80055da:	75fb      	strb	r3, [r7, #23]
 80055dc:	e001      	b.n	80055e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055de:	230f      	movs	r3, #15
 80055e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d13a      	bne.n	8005682 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	2101      	movs	r1, #1
 800561e:	fa01 f303 	lsl.w	r3, r1, r3
 8005622:	b29b      	uxth	r3, r3
 8005624:	68f9      	ldr	r1, [r7, #12]
 8005626:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800562a:	4313      	orrs	r3, r2
 800562c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d155      	bne.n	80056f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	791b      	ldrb	r3, [r3, #4]
 800565e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005660:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	059b      	lsls	r3, r3, #22
 8005666:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005668:	4313      	orrs	r3, r2
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	e036      	b.n	80056f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	2101      	movs	r1, #1
 8005694:	fa01 f303 	lsl.w	r3, r1, r3
 8005698:	041b      	lsls	r3, r3, #16
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11a      	bne.n	80056f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	791b      	ldrb	r3, [r3, #4]
 80056d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056d6:	430b      	orrs	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d161      	bne.n	80057e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005732:	d11f      	bne.n	8005774 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800574e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005752:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800576e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005772:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	2101      	movs	r1, #1
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	b29b      	uxth	r3, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005794:	4013      	ands	r3, r2
 8005796:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	2101      	movs	r1, #1
 80057aa:	fa01 f303 	lsl.w	r3, r1, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057b8:	4013      	ands	r3, r2
 80057ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	0159      	lsls	r1, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	440b      	add	r3, r1
 80057d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d6:	4619      	mov	r1, r3
 80057d8:	4b35      	ldr	r3, [pc, #212]	@ (80058b0 <USB_DeactivateEndpoint+0x1b0>)
 80057da:	4013      	ands	r3, r2
 80057dc:	600b      	str	r3, [r1, #0]
 80057de:	e060      	b.n	80058a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057f6:	d11f      	bne.n	8005838 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005812:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005816:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005832:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	2101      	movs	r1, #1
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	43db      	mvns	r3, r3
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005858:	4013      	ands	r3, r2
 800585a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f303 	lsl.w	r3, r1, r3
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	43db      	mvns	r3, r3
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800587c:	4013      	ands	r3, r2
 800587e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	0159      	lsls	r1, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	440b      	add	r3, r1
 8005896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589a:	4619      	mov	r1, r3
 800589c:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <USB_DeactivateEndpoint+0x1b4>)
 800589e:	4013      	ands	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	ec337800 	.word	0xec337800
 80058b4:	eff37800 	.word	0xeff37800

080058b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	@ 0x28
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	4613      	mov	r3, r2
 80058c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	f040 817f 	bne.w	8005bd8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d132      	bne.n	8005948 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005900:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005904:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005920:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005924:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005940:	0cdb      	lsrs	r3, r3, #19
 8005942:	04db      	lsls	r3, r3, #19
 8005944:	6113      	str	r3, [r2, #16]
 8005946:	e097      	b.n	8005a78 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005962:	0cdb      	lsrs	r3, r3, #19
 8005964:	04db      	lsls	r3, r3, #19
 8005966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005982:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005986:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800598a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11a      	bne.n	80059c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d903      	bls.n	80059a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059c4:	6113      	str	r3, [r2, #16]
 80059c6:	e044      	b.n	8005a52 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	1e5a      	subs	r2, r3, #1
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	8afb      	ldrh	r3, [r7, #22]
 80059ee:	04d9      	lsls	r1, r3, #19
 80059f0:	4ba4      	ldr	r3, [pc, #656]	@ (8005c84 <USB_EPStartXfer+0x3cc>)
 80059f2:	400b      	ands	r3, r1
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	0148      	lsls	r0, r1, #5
 80059f8:	69f9      	ldr	r1, [r7, #28]
 80059fa:	4401      	add	r1, r0
 80059fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a00:	4313      	orrs	r3, r2
 8005a02:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	791b      	ldrb	r3, [r3, #4]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d122      	bne.n	8005a52 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a26:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005a2a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	8afb      	ldrh	r3, [r7, #22]
 8005a3c:	075b      	lsls	r3, r3, #29
 8005a3e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	0148      	lsls	r0, r1, #5
 8005a46:	69f9      	ldr	r1, [r7, #28]
 8005a48:	4401      	add	r1, r0
 8005a4a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	0148      	lsls	r0, r1, #5
 8005a6c:	69f9      	ldr	r1, [r7, #28]
 8005a6e:	4401      	add	r1, r0
 8005a70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a74:	4313      	orrs	r3, r2
 8005a76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d14b      	bne.n	8005b16 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	791b      	ldrb	r3, [r3, #4]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d128      	bne.n	8005af4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d110      	bne.n	8005ad4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005acc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e00f      	b.n	8005af4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b0e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e166      	b.n	8005de4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b34:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	791b      	ldrb	r3, [r3, #4]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d015      	beq.n	8005b6a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 814e 	beq.w	8005de4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b64:	4313      	orrs	r3, r2
 8005b66:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b68:	e13c      	b.n	8005de4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d110      	bne.n	8005b9c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e00f      	b.n	8005bbc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68d9      	ldr	r1, [r3, #12]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	781a      	ldrb	r2, [r3, #0]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	b298      	uxth	r0, r3
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	4603      	mov	r3, r0
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f9b9 	bl	8005f48 <USB_WritePacket>
 8005bd6:	e105      	b.n	8005de4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf2:	0cdb      	lsrs	r3, r3, #19
 8005bf4:	04db      	lsls	r3, r3, #19
 8005bf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c1a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d132      	bne.n	8005c88 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	0148      	lsls	r0, r1, #5
 8005c54:	69f9      	ldr	r1, [r7, #28]
 8005c56:	4401      	add	r1, r0
 8005c58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c7e:	6113      	str	r3, [r2, #16]
 8005c80:	e062      	b.n	8005d48 <USB_EPStartXfer+0x490>
 8005c82:	bf00      	nop
 8005c84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d123      	bne.n	8005cd8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca6:	69b9      	ldr	r1, [r7, #24]
 8005ca8:	0148      	lsls	r0, r1, #5
 8005caa:	69f9      	ldr	r1, [r7, #28]
 8005cac:	4401      	add	r1, r0
 8005cae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
 8005cd6:	e037      	b.n	8005d48 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	1e5a      	subs	r2, r3, #1
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	8afa      	ldrh	r2, [r7, #22]
 8005cf4:	fb03 f202 	mul.w	r2, r3, r2
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	8afb      	ldrh	r3, [r7, #22]
 8005d0c:	04d9      	lsls	r1, r3, #19
 8005d0e:	4b38      	ldr	r3, [pc, #224]	@ (8005df0 <USB_EPStartXfer+0x538>)
 8005d10:	400b      	ands	r3, r1
 8005d12:	69b9      	ldr	r1, [r7, #24]
 8005d14:	0148      	lsls	r0, r1, #5
 8005d16:	69f9      	ldr	r1, [r7, #28]
 8005d18:	4401      	add	r1, r0
 8005d1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	0148      	lsls	r0, r1, #5
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	4401      	add	r1, r0
 8005d40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d44:	4313      	orrs	r3, r2
 8005d46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10d      	bne.n	8005d6a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d66:	460a      	mov	r2, r1
 8005d68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d128      	bne.n	8005dc4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d110      	bne.n	8005da4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e00f      	b.n	8005dc4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dde:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	1ff80000 	.word	0x1ff80000

08005df4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d14a      	bne.n	8005ea8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e2a:	f040 8086 	bne.w	8005f3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d902      	bls.n	8005e8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	75fb      	strb	r3, [r7, #23]
          break;
 8005e8a:	e056      	b.n	8005f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea4:	d0e7      	beq.n	8005e76 <USB_EPStopXfer+0x82>
 8005ea6:	e048      	b.n	8005f3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ec0:	d13b      	bne.n	8005f3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ee4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d902      	bls.n	8005f20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1e:	e00c      	b.n	8005f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f38:	d0e7      	beq.n	8005f0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	@ 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4611      	mov	r1, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	460b      	mov	r3, r1
 8005f58:	71fb      	strb	r3, [r7, #7]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d123      	bne.n	8005fb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f6e:	88bb      	ldrh	r3, [r7, #4]
 8005f70:	3303      	adds	r3, #3
 8005f72:	089b      	lsrs	r3, r3, #2
 8005f74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e018      	b.n	8005fae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	031a      	lsls	r2, r3, #12
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f88:	461a      	mov	r2, r3
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	3301      	adds	r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d3e2      	bcc.n	8005f7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3724      	adds	r7, #36	@ 0x24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	@ 0x2c
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e014      	b.n	800601a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	3301      	adds	r3, #1
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	3301      	adds	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	3301      	adds	r3, #1
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	3301      	adds	r3, #1
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3e6      	bcc.n	8005ff0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006022:	8bfb      	ldrh	r3, [r7, #30]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01e      	beq.n	8006066 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006032:	461a      	mov	r2, r3
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
 8006048:	b2da      	uxtb	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	701a      	strb	r2, [r3, #0]
      i++;
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	3301      	adds	r3, #1
 8006052:	623b      	str	r3, [r7, #32]
      pDest++;
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800605a:	8bfb      	ldrh	r3, [r7, #30]
 800605c:	3b01      	subs	r3, #1
 800605e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006060:	8bfb      	ldrh	r3, [r7, #30]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1ea      	bne.n	800603c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006068:	4618      	mov	r0, r3
 800606a:	372c      	adds	r7, #44	@ 0x2c
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d12c      	bne.n	80060ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	db12      	blt.n	80060c8 <USB_EPSetStall+0x54>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00f      	beq.n	80060c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e02b      	b.n	8006142 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db12      	blt.n	8006122 <USB_EPSetStall+0xae>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006120:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800613c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006140:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d128      	bne.n	80061be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006186:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800618a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	791b      	ldrb	r3, [r3, #4]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d003      	beq.n	800619c <USB_EPClearStall+0x4c>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	791b      	ldrb	r3, [r3, #4]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d138      	bne.n	800620e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	e027      	b.n	800620e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	791b      	ldrb	r3, [r3, #4]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d003      	beq.n	80061ee <USB_EPClearStall+0x9e>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	791b      	ldrb	r3, [r3, #4]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d10f      	bne.n	800620e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800620c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800623a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800623e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006296:	f023 0302 	bic.w	r3, r3, #2
 800629a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062c4:	f023 0303 	bic.w	r3, r3, #3
 80062c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062d8:	f043 0302 	orr.w	r3, r3, #2
 80062dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	4013      	ands	r3, r2
 8006334:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	0c1b      	lsrs	r3, r3, #16
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	b29b      	uxth	r3, r3
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	4013      	ands	r3, r2
 80063a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a8:	68bb      	ldr	r3, [r7, #8]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4013      	ands	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006404:	68bb      	ldr	r3, [r7, #8]
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006448:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	460b      	mov	r3, r1
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	333c      	adds	r3, #60	@ 0x3c
 800648a:	3304      	adds	r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4a26      	ldr	r2, [pc, #152]	@ (800652c <USB_EP0_OutStart+0xb8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d90a      	bls.n	80064ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a8:	d101      	bne.n	80064ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e037      	b.n	800651e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064dc:	f043 0318 	orr.w	r3, r3, #24
 80064e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80064f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d10f      	bne.n	800651c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006516:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800651a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	4f54300a 	.word	0x4f54300a

08006530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006548:	d901      	bls.n	800654e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e022      	b.n	8006594 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	daf2      	bge.n	800653c <USB_CoreReset+0xc>

  count = 10U;
 8006556:	230a      	movs	r3, #10
 8006558:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800655a:	e002      	b.n	8006562 <USB_CoreReset+0x32>
  {
    count--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3b01      	subs	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f9      	bne.n	800655c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f043 0201 	orr.w	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006580:	d901      	bls.n	8006586 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e006      	b.n	8006594 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d0f0      	beq.n	8006574 <USB_CoreReset+0x44>

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80065ac:	2018      	movs	r0, #24
 80065ae:	f002 fb09 	bl	8008bc4 <USBD_static_malloc>
 80065b2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	32b0      	adds	r2, #176	@ 0xb0
 80065c4:	2100      	movs	r1, #0
 80065c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065ca:	2302      	movs	r3, #2
 80065cc:	e08a      	b.n	80066e4 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	32b0      	adds	r2, #176	@ 0xb0
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	32b0      	adds	r2, #176	@ 0xb0
 80065e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7c1b      	ldrb	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d11b      	bne.n	8006632 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80065fa:	4b3c      	ldr	r3, [pc, #240]	@ (80066ec <USBD_CUSTOM_HID_Init+0x14c>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	331c      	adds	r3, #28
 8006610:	2205      	movs	r2, #5
 8006612:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006614:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <USBD_CUSTOM_HID_Init+0x150>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800662c:	2205      	movs	r2, #5
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e01a      	b.n	8006668 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006632:	4b2e      	ldr	r3, [pc, #184]	@ (80066ec <USBD_CUSTOM_HID_Init+0x14c>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	331c      	adds	r3, #28
 8006648:	2205      	movs	r2, #5
 800664a:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800664c:	4b28      	ldr	r3, [pc, #160]	@ (80066f0 <USBD_CUSTOM_HID_Init+0x150>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006664:	2205      	movs	r2, #5
 8006666:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006668:	4b20      	ldr	r3, [pc, #128]	@ (80066ec <USBD_CUSTOM_HID_Init+0x14c>)
 800666a:	7819      	ldrb	r1, [r3, #0]
 800666c:	2340      	movs	r3, #64	@ 0x40
 800666e:	2203      	movs	r2, #3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 f996 	bl	80089a2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006676:	4b1d      	ldr	r3, [pc, #116]	@ (80066ec <USBD_CUSTOM_HID_Init+0x14c>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f003 020f 	and.w	r2, r3, #15
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3323      	adds	r3, #35	@ 0x23
 800668c:	2201      	movs	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006690:	4b17      	ldr	r3, [pc, #92]	@ (80066f0 <USBD_CUSTOM_HID_Init+0x150>)
 8006692:	7819      	ldrb	r1, [r3, #0]
 8006694:	2302      	movs	r3, #2
 8006696:	2203      	movs	r2, #3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f002 f982 	bl	80089a2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800669e:	4b14      	ldr	r3, [pc, #80]	@ (80066f0 <USBD_CUSTOM_HID_Init+0x150>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f003 020f 	and.w	r2, r3, #15
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80066b6:	2201      	movs	r2, #1
 80066b8:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	33b0      	adds	r3, #176	@ 0xb0
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80066d4:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <USBD_CUSTOM_HID_Init+0x150>)
 80066d6:	7819      	ldrb	r1, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	2302      	movs	r3, #2
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f002 fa4f 	bl	8008b80 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	200000a6 	.word	0x200000a6
 80066f0:	200000a7 	.word	0x200000a7

080066f4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006700:	4b37      	ldr	r3, [pc, #220]	@ (80067e0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f002 f971 	bl	80089ee <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800670c:	4b34      	ldr	r3, [pc, #208]	@ (80067e0 <USBD_CUSTOM_HID_DeInit+0xec>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3323      	adds	r3, #35	@ 0x23
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006726:	4b2e      	ldr	r3, [pc, #184]	@ (80067e0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	f003 020f 	and.w	r2, r3, #15
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4613      	mov	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	440b      	add	r3, r1
 800673a:	331c      	adds	r3, #28
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006740:	4b28      	ldr	r3, [pc, #160]	@ (80067e4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f002 f951 	bl	80089ee <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800674c:	4b25      	ldr	r3, [pc, #148]	@ (80067e4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 020f 	and.w	r2, r3, #15
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006768:	4b1e      	ldr	r3, [pc, #120]	@ (80067e4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	32b0      	adds	r2, #176	@ 0xb0
 800678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01f      	beq.n	80067d6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	33b0      	adds	r3, #176	@ 0xb0
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	32b0      	adds	r2, #176	@ 0xb0
 80067b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f002 fa11 	bl	8008be0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	32b0      	adds	r2, #176	@ 0xb0
 80067c8:	2100      	movs	r1, #0
 80067ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	200000a6 	.word	0x200000a6
 80067e4:	200000a7 	.word	0x200000a7

080067e8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	32b0      	adds	r2, #176	@ 0xb0
 80067fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006800:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	e108      	b.n	8006a2e <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05c      	beq.n	80068e2 <USBD_CUSTOM_HID_Setup+0xfa>
 8006828:	2b20      	cmp	r3, #32
 800682a:	f040 80f8 	bne.w	8006a1e <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	3b02      	subs	r3, #2
 8006834:	2b09      	cmp	r3, #9
 8006836:	d84c      	bhi.n	80068d2 <USBD_CUSTOM_HID_Setup+0xea>
 8006838:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <USBD_CUSTOM_HID_Setup+0x58>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006899 	.word	0x08006899
 8006844:	08006877 	.word	0x08006877
 8006848:	080068d3 	.word	0x080068d3
 800684c:	080068d3 	.word	0x080068d3
 8006850:	080068d3 	.word	0x080068d3
 8006854:	080068d3 	.word	0x080068d3
 8006858:	080068d3 	.word	0x080068d3
 800685c:	080068a9 	.word	0x080068a9
 8006860:	08006887 	.word	0x08006887
 8006864:	08006869 	.word	0x08006869
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	885b      	ldrh	r3, [r3, #2]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	605a      	str	r2, [r3, #4]
          break;
 8006874:	e034      	b.n	80068e0 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3304      	adds	r3, #4
 800687a:	2201      	movs	r2, #1
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 fcfc 	bl	800827c <USBD_CtlSendData>
          break;
 8006884:	e02c      	b.n	80068e0 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	b29b      	uxth	r3, r3
 800688e:	b2db      	uxtb	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	609a      	str	r2, [r3, #8]
          break;
 8006896:	e023      	b.n	80068e0 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3308      	adds	r3, #8
 800689c:	2201      	movs	r2, #1
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fceb 	bl	800827c <USBD_CtlSendData>
          break;
 80068a6:	e01b      	b.n	80068e0 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	88db      	ldrh	r3, [r3, #6]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d905      	bls.n	80068bc <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fc65 	bl	8008182 <USBD_CtlError>
            return USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e0b8      	b.n	8006a2e <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2201      	movs	r2, #1
 80068c0:	611a      	str	r2, [r3, #16]

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80068c2:	6939      	ldr	r1, [r7, #16]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fd05 	bl	80082da <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80068d0:	e006      	b.n	80068e0 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fc54 	bl	8008182 <USBD_CtlError>
          ret = USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	75fb      	strb	r3, [r7, #23]
          break;
 80068de:	bf00      	nop
      }
      break;
 80068e0:	e0a4      	b.n	8006a2c <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2b0b      	cmp	r3, #11
 80068e8:	f200 8090 	bhi.w	8006a0c <USBD_CUSTOM_HID_Setup+0x224>
 80068ec:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <USBD_CUSTOM_HID_Setup+0x10c>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006925 	.word	0x08006925
 80068f8:	08006a1b 	.word	0x08006a1b
 80068fc:	08006a0d 	.word	0x08006a0d
 8006900:	08006a0d 	.word	0x08006a0d
 8006904:	08006a0d 	.word	0x08006a0d
 8006908:	08006a0d 	.word	0x08006a0d
 800690c:	0800694f 	.word	0x0800694f
 8006910:	08006a0d 	.word	0x08006a0d
 8006914:	08006a0d 	.word	0x08006a0d
 8006918:	08006a0d 	.word	0x08006a0d
 800691c:	080069bb 	.word	0x080069bb
 8006920:	080069e5 	.word	0x080069e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b03      	cmp	r3, #3
 800692e:	d107      	bne.n	8006940 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006930:	f107 030e 	add.w	r3, r7, #14
 8006934:	2202      	movs	r2, #2
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 fc9f 	bl	800827c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800693e:	e06d      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fc1d 	bl	8008182 <USBD_CtlError>
            ret = USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	75fb      	strb	r3, [r7, #23]
          break;
 800694c:	e066      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	885b      	ldrh	r3, [r3, #2]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b22      	cmp	r3, #34	@ 0x22
 8006958:	d110      	bne.n	800697c <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88db      	ldrh	r3, [r3, #6]
 800695e:	2ba3      	cmp	r3, #163	@ 0xa3
 8006960:	bf28      	it	cs
 8006962:	23a3      	movcs	r3, #163	@ 0xa3
 8006964:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	33b0      	adds	r3, #176	@ 0xb0
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	e00d      	b.n	8006998 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	885b      	ldrh	r3, [r3, #2]
 8006980:	0a1b      	lsrs	r3, r3, #8
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b21      	cmp	r3, #33	@ 0x21
 8006986:	d107      	bne.n	8006998 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006988:	4b2b      	ldr	r3, [pc, #172]	@ (8006a38 <USBD_CUSTOM_HID_Setup+0x250>)
 800698a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	88db      	ldrh	r3, [r3, #6]
 8006990:	2b09      	cmp	r3, #9
 8006992:	bf28      	it	cs
 8006994:	2309      	movcs	r3, #9
 8006996:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d006      	beq.n	80069ac <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800699e:	8bfb      	ldrh	r3, [r7, #30]
 80069a0:	461a      	mov	r2, r3
 80069a2:	69b9      	ldr	r1, [r7, #24]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fc69 	bl	800827c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069aa:	e037      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fbe7 	bl	8008182 <USBD_CtlError>
            ret = USBD_FAIL;
 80069b4:	2303      	movs	r3, #3
 80069b6:	75fb      	strb	r3, [r7, #23]
          break;
 80069b8:	e030      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d107      	bne.n	80069d6 <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	330c      	adds	r3, #12
 80069ca:	2201      	movs	r2, #1
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fc54 	bl	800827c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069d4:	e022      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fbd2 	bl	8008182 <USBD_CtlError>
            ret = USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	75fb      	strb	r3, [r7, #23]
          break;
 80069e2:	e01b      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d106      	bne.n	80069fe <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	885b      	ldrh	r3, [r3, #2]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069fc:	e00e      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fbbe 	bl	8008182 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a06:	2303      	movs	r3, #3
 8006a08:	75fb      	strb	r3, [r7, #23]
          break;
 8006a0a:	e007      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fbb7 	bl	8008182 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	75fb      	strb	r3, [r7, #23]
          break;
 8006a18:	e000      	b.n	8006a1c <USBD_CUSTOM_HID_Setup+0x234>
          break;
 8006a1a:	bf00      	nop
      }
      break;
 8006a1c:	e006      	b.n	8006a2c <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 fbae 	bl	8008182 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a26:	2303      	movs	r3, #3
 8006a28:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2a:	bf00      	nop
  }
  return (uint8_t)ret;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000090 	.word	0x20000090

08006a3c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	32b0      	adds	r2, #176	@ 0xb0
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e017      	b.n	8006a94 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d110      	bne.n	8006a92 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	7d1b      	ldrb	r3, [r3, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006a7e:	4b07      	ldr	r3, [pc, #28]	@ (8006a9c <USBD_CUSTOM_HID_SendReport+0x60>)
 8006a80:	7819      	ldrb	r1, [r3, #0]
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f002 f859 	bl	8008b3e <USBD_LL_Transmit>
 8006a8c:	e001      	b.n	8006a92 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200000a6 	.word	0x200000a6

08006aa0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006aa8:	2181      	movs	r1, #129	@ 0x81
 8006aaa:	4815      	ldr	r0, [pc, #84]	@ (8006b00 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006aac:	f000 fd30 	bl	8007510 <USBD_GetEpDesc>
 8006ab0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006ab2:	2140      	movs	r1, #64	@ 0x40
 8006ab4:	4812      	ldr	r0, [pc, #72]	@ (8006b00 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006ab6:	f000 fd2b 	bl	8007510 <USBD_GetEpDesc>
 8006aba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aca:	711a      	strb	r2, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2205      	movs	r2, #5
 8006ad4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f042 0202 	orr.w	r2, r2, #2
 8006ae4:	711a      	strb	r2, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2205      	movs	r2, #5
 8006aee:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2229      	movs	r2, #41	@ 0x29
 8006af4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006af6:	4b02      	ldr	r3, [pc, #8]	@ (8006b00 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000064 	.word	0x20000064

08006b04 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006b0c:	2181      	movs	r1, #129	@ 0x81
 8006b0e:	4815      	ldr	r0, [pc, #84]	@ (8006b64 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006b10:	f000 fcfe 	bl	8007510 <USBD_GetEpDesc>
 8006b14:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006b16:	2140      	movs	r1, #64	@ 0x40
 8006b18:	4812      	ldr	r0, [pc, #72]	@ (8006b64 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006b1a:	f000 fcf9 	bl	8007510 <USBD_GetEpDesc>
 8006b1e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b2e:	711a      	strb	r2, [r3, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2205      	movs	r2, #5
 8006b38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f042 0202 	orr.w	r2, r2, #2
 8006b48:	711a      	strb	r2, [r3, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2205      	movs	r2, #5
 8006b52:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2229      	movs	r2, #41	@ 0x29
 8006b58:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006b5a:	4b02      	ldr	r3, [pc, #8]	@ (8006b64 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000064 	.word	0x20000064

08006b68 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006b70:	2181      	movs	r1, #129	@ 0x81
 8006b72:	4815      	ldr	r0, [pc, #84]	@ (8006bc8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006b74:	f000 fccc 	bl	8007510 <USBD_GetEpDesc>
 8006b78:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006b7a:	2140      	movs	r1, #64	@ 0x40
 8006b7c:	4812      	ldr	r0, [pc, #72]	@ (8006bc8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006b7e:	f000 fcc7 	bl	8007510 <USBD_GetEpDesc>
 8006b82:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b92:	711a      	strb	r2, [r3, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2205      	movs	r2, #5
 8006b9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d009      	beq.n	8006bb8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f042 0202 	orr.w	r2, r2, #2
 8006bac:	711a      	strb	r2, [r3, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2205      	movs	r2, #5
 8006bb6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2229      	movs	r2, #41	@ 0x29
 8006bbc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006bbe:	4b02      	ldr	r3, [pc, #8]	@ (8006bc8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000064 	.word	0x20000064

08006bcc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	32b0      	adds	r2, #176	@ 0xb0
 8006be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be6:	2200      	movs	r2, #0
 8006be8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	32b0      	adds	r2, #176	@ 0xb0
 8006c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e017      	b.n	8006c4a <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	32b0      	adds	r2, #176	@ 0xb0
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	33b0      	adds	r3, #176	@ 0xb0
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	7810      	ldrb	r0, [r2, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	7852      	ldrb	r2, [r2, #1]
 8006c44:	4611      	mov	r1, r2
 8006c46:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	32b0      	adds	r2, #176	@ 0xb0
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	32b0      	adds	r2, #176	@ 0xb0
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006c82:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006c84:	7819      	ldrb	r1, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	2302      	movs	r3, #2
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 ff78 	bl	8008b80 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200000a7 	.word	0x200000a7

08006ca0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	32b0      	adds	r2, #176	@ 0xb0
 8006cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e016      	b.n	8006cf0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d111      	bne.n	8006cee <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	33b0      	adds	r3, #176	@ 0xb0
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	7810      	ldrb	r0, [r2, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	7852      	ldrb	r2, [r2, #1]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	220a      	movs	r2, #10
 8006d04:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006d06:	4b03      	ldr	r3, [pc, #12]	@ (8006d14 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	2000009c 	.word	0x2000009c

08006d18 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e009      	b.n	8006d40 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	33b0      	adds	r3, #176	@ 0xb0
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e01f      	b.n	8006da4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f001 fd9b 	bl	80088d4 <USBD_LL_Init>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e025      	b.n	8006e10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	32ae      	adds	r2, #174	@ 0xae
 8006dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00f      	beq.n	8006e00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32ae      	adds	r2, #174	@ 0xae
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df0:	f107 020e 	add.w	r2, r7, #14
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	4602      	mov	r2, r0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fda3 	bl	800896c <USBD_LL_Start>
 8006e26:	4603      	mov	r3, r0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	4611      	mov	r1, r2
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4798      	blx	r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 f922 	bl	800810e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d01a      	beq.n	8006f24 <USBD_LL_SetupStage+0x72>
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d822      	bhi.n	8006f38 <USBD_LL_SetupStage+0x86>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <USBD_LL_SetupStage+0x4a>
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d00a      	beq.n	8006f10 <USBD_LL_SetupStage+0x5e>
 8006efa:	e01d      	b.n	8006f38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fb77 	bl	80075f8 <USBD_StdDevReq>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0e:	e020      	b.n	8006f52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fbdf 	bl	80076dc <USBD_StdItfReq>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
      break;
 8006f22:	e016      	b.n	8006f52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fc41 	bl	80077b4 <USBD_StdEPReq>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
      break;
 8006f36:	e00c      	b.n	8006f52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fd70 	bl	8008a2c <USBD_LL_StallEP>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f50:	bf00      	nop
  }

  return ret;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	460b      	mov	r3, r1
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d177      	bne.n	8007064 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006f7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	f040 80a1 	bne.w	80070ca <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	8992      	ldrh	r2, [r2, #12]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d91c      	bls.n	8006fce <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	8992      	ldrh	r2, [r2, #12]
 8006f9c:	1a9a      	subs	r2, r3, r2
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	8992      	ldrh	r2, [r2, #12]
 8006faa:	441a      	add	r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6919      	ldr	r1, [r3, #16]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	899b      	ldrh	r3, [r3, #12]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bf38      	it	cc
 8006fc2:	4613      	movcc	r3, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f001 f9a8 	bl	800831c <USBD_CtlContinueRx>
 8006fcc:	e07d      	b.n	80070ca <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d014      	beq.n	8007006 <USBD_LL_DataOutStage+0xaa>
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d81d      	bhi.n	800701c <USBD_LL_DataOutStage+0xc0>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <USBD_LL_DataOutStage+0x8e>
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d003      	beq.n	8006ff0 <USBD_LL_DataOutStage+0x94>
 8006fe8:	e018      	b.n	800701c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75bb      	strb	r3, [r7, #22]
            break;
 8006fee:	e018      	b.n	8007022 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fa6e 	bl	80074dc <USBD_CoreFindIF>
 8007000:	4603      	mov	r3, r0
 8007002:	75bb      	strb	r3, [r7, #22]
            break;
 8007004:	e00d      	b.n	8007022 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800700c:	b2db      	uxtb	r3, r3
 800700e:	4619      	mov	r1, r3
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fa70 	bl	80074f6 <USBD_CoreFindEP>
 8007016:	4603      	mov	r3, r0
 8007018:	75bb      	strb	r3, [r7, #22]
            break;
 800701a:	e002      	b.n	8007022 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	75bb      	strb	r3, [r7, #22]
            break;
 8007020:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007022:	7dbb      	ldrb	r3, [r7, #22]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d119      	bne.n	800705c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b03      	cmp	r3, #3
 8007032:	d113      	bne.n	800705c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007034:	7dba      	ldrb	r2, [r7, #22]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	32ae      	adds	r2, #174	@ 0xae
 800703a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007044:	7dba      	ldrb	r2, [r7, #22]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800704c:	7dba      	ldrb	r2, [r7, #22]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	32ae      	adds	r2, #174	@ 0xae
 8007052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f001 f96e 	bl	800833e <USBD_CtlSendStatus>
 8007062:	e032      	b.n	80070ca <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007064:	7afb      	ldrb	r3, [r7, #11]
 8007066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800706a:	b2db      	uxtb	r3, r3
 800706c:	4619      	mov	r1, r3
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fa41 	bl	80074f6 <USBD_CoreFindEP>
 8007074:	4603      	mov	r3, r0
 8007076:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007078:	7dbb      	ldrb	r3, [r7, #22]
 800707a:	2bff      	cmp	r3, #255	@ 0xff
 800707c:	d025      	beq.n	80070ca <USBD_LL_DataOutStage+0x16e>
 800707e:	7dbb      	ldrb	r3, [r7, #22]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d122      	bne.n	80070ca <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b03      	cmp	r3, #3
 800708e:	d117      	bne.n	80070c0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007090:	7dba      	ldrb	r2, [r7, #22]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	32ae      	adds	r2, #174	@ 0xae
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00f      	beq.n	80070c0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80070a0:	7dba      	ldrb	r2, [r7, #22]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070a8:	7dba      	ldrb	r2, [r7, #22]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	32ae      	adds	r2, #174	@ 0xae
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	7afa      	ldrb	r2, [r7, #11]
 80070b6:	4611      	mov	r1, r2
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	4798      	blx	r3
 80070bc:	4603      	mov	r3, r0
 80070be:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	e000      	b.n	80070cc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	460b      	mov	r3, r1
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d178      	bne.n	80071da <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3314      	adds	r3, #20
 80070ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d163      	bne.n	80071c0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	8992      	ldrh	r2, [r2, #12]
 8007100:	4293      	cmp	r3, r2
 8007102:	d91c      	bls.n	800713e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	8992      	ldrh	r2, [r2, #12]
 800710c:	1a9a      	subs	r2, r3, r2
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	8992      	ldrh	r2, [r2, #12]
 800711a:	441a      	add	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6919      	ldr	r1, [r3, #16]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	461a      	mov	r2, r3
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f001 f8c4 	bl	80082b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007130:	2300      	movs	r3, #0
 8007132:	2200      	movs	r2, #0
 8007134:	2100      	movs	r1, #0
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f001 fd22 	bl	8008b80 <USBD_LL_PrepareReceive>
 800713c:	e040      	b.n	80071c0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	899b      	ldrh	r3, [r3, #12]
 8007142:	461a      	mov	r2, r3
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	429a      	cmp	r2, r3
 800714a:	d11c      	bne.n	8007186 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007154:	4293      	cmp	r3, r2
 8007156:	d316      	bcc.n	8007186 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007162:	429a      	cmp	r2, r3
 8007164:	d20f      	bcs.n	8007186 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007166:	2200      	movs	r2, #0
 8007168:	2100      	movs	r1, #0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 f8a4 	bl	80082b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007178:	2300      	movs	r3, #0
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f001 fcfe 	bl	8008b80 <USBD_LL_PrepareReceive>
 8007184:	e01c      	b.n	80071c0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b03      	cmp	r3, #3
 8007190:	d10f      	bne.n	80071b2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071b2:	2180      	movs	r1, #128	@ 0x80
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f001 fc39 	bl	8008a2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f001 f8d2 	bl	8008364 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d03a      	beq.n	8007240 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff fe30 	bl	8006e30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071d8:	e032      	b.n	8007240 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f986 	bl	80074f6 <USBD_CoreFindEP>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2bff      	cmp	r3, #255	@ 0xff
 80071f2:	d025      	beq.n	8007240 <USBD_LL_DataInStage+0x16c>
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d122      	bne.n	8007240 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b03      	cmp	r3, #3
 8007204:	d11c      	bne.n	8007240 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007206:	7dfa      	ldrb	r2, [r7, #23]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	32ae      	adds	r2, #174	@ 0xae
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d014      	beq.n	8007240 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007216:	7dfa      	ldrb	r2, [r7, #23]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800721e:	7dfa      	ldrb	r2, [r7, #23]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	32ae      	adds	r2, #174	@ 0xae
 8007224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	7afa      	ldrb	r2, [r7, #11]
 800722c:	4611      	mov	r1, r2
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	4798      	blx	r3
 8007232:	4603      	mov	r3, r0
 8007234:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007236:	7dbb      	ldrb	r3, [r7, #22]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800723c:	7dbb      	ldrb	r3, [r7, #22]
 800723e:	e000      	b.n	8007242 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d014      	beq.n	80072b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00e      	beq.n	80072b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6852      	ldr	r2, [r2, #4]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	4611      	mov	r1, r2
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072b0:	2340      	movs	r3, #64	@ 0x40
 80072b2:	2200      	movs	r2, #0
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fb73 	bl	80089a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2240      	movs	r2, #64	@ 0x40
 80072c8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072cc:	2340      	movs	r3, #64	@ 0x40
 80072ce:	2200      	movs	r2, #0
 80072d0:	2180      	movs	r1, #128	@ 0x80
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fb65 	bl	80089a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2240      	movs	r2, #64	@ 0x40
 80072e4:	841a      	strh	r2, [r3, #32]

  return ret;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b04      	cmp	r3, #4
 8007322:	d006      	beq.n	8007332 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800732a:	b2da      	uxtb	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2204      	movs	r2, #4
 8007336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b04      	cmp	r3, #4
 800735a:	d106      	bne.n	800736a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007362:	b2da      	uxtb	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b03      	cmp	r3, #3
 800738a:	d110      	bne.n	80073ae <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00b      	beq.n	80073ae <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32ae      	adds	r2, #174	@ 0xae
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e01c      	b.n	8007414 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d115      	bne.n	8007412 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32ae      	adds	r2, #174	@ 0xae
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	32ae      	adds	r2, #174	@ 0xae
 8007404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	4611      	mov	r1, r2
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32ae      	adds	r2, #174	@ 0xae
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800743a:	2303      	movs	r3, #3
 800743c:	e01c      	b.n	8007478 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b03      	cmp	r3, #3
 8007448:	d115      	bne.n	8007476 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	32ae      	adds	r2, #174	@ 0xae
 8007454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	32ae      	adds	r2, #174	@ 0xae
 8007468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4611      	mov	r1, r2
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6852      	ldr	r2, [r2, #4]
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	4611      	mov	r1, r2
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074ce:	2303      	movs	r3, #3
 80074d0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007502:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	885b      	ldrh	r3, [r3, #2]
 800752c:	b29b      	uxth	r3, r3
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	7812      	ldrb	r2, [r2, #0]
 8007532:	4293      	cmp	r3, r2
 8007534:	d91f      	bls.n	8007576 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800753c:	e013      	b.n	8007566 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800753e:	f107 030a 	add.w	r3, r7, #10
 8007542:	4619      	mov	r1, r3
 8007544:	6978      	ldr	r0, [r7, #20]
 8007546:	f000 f81b 	bl	8007580 <USBD_GetNextDesc>
 800754a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b05      	cmp	r3, #5
 8007552:	d108      	bne.n	8007566 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	789b      	ldrb	r3, [r3, #2]
 800755c:	78fa      	ldrb	r2, [r7, #3]
 800755e:	429a      	cmp	r2, r3
 8007560:	d008      	beq.n	8007574 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	885b      	ldrh	r3, [r3, #2]
 800756a:	b29a      	uxth	r2, r3
 800756c:	897b      	ldrh	r3, [r7, #10]
 800756e:	429a      	cmp	r2, r3
 8007570:	d8e5      	bhi.n	800753e <USBD_GetEpDesc+0x2e>
 8007572:	e000      	b.n	8007576 <USBD_GetEpDesc+0x66>
          break;
 8007574:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007576:	693b      	ldr	r3, [r7, #16]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	4413      	add	r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4413      	add	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	3301      	adds	r3, #1
 80075ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	b21a      	sxth	r2, r3
 80075de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	b21b      	sxth	r3, r3
 80075e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075e8:	89fb      	ldrh	r3, [r7, #14]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d005      	beq.n	800761e <USBD_StdDevReq+0x26>
 8007612:	2b40      	cmp	r3, #64	@ 0x40
 8007614:	d857      	bhi.n	80076c6 <USBD_StdDevReq+0xce>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00f      	beq.n	800763a <USBD_StdDevReq+0x42>
 800761a:	2b20      	cmp	r3, #32
 800761c:	d153      	bne.n	80076c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	32ae      	adds	r2, #174	@ 0xae
 8007628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
      break;
 8007638:	e04a      	b.n	80076d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b09      	cmp	r3, #9
 8007640:	d83b      	bhi.n	80076ba <USBD_StdDevReq+0xc2>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <USBD_StdDevReq+0x50>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	0800769d 	.word	0x0800769d
 800764c:	080076b1 	.word	0x080076b1
 8007650:	080076bb 	.word	0x080076bb
 8007654:	080076a7 	.word	0x080076a7
 8007658:	080076bb 	.word	0x080076bb
 800765c:	0800767b 	.word	0x0800767b
 8007660:	08007671 	.word	0x08007671
 8007664:	080076bb 	.word	0x080076bb
 8007668:	08007693 	.word	0x08007693
 800766c:	08007685 	.word	0x08007685
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa3e 	bl	8007af4 <USBD_GetDescriptor>
          break;
 8007678:	e024      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fba3 	bl	8007dc8 <USBD_SetAddress>
          break;
 8007682:	e01f      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fbe2 	bl	8007e50 <USBD_SetConfig>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
          break;
 8007690:	e018      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fc85 	bl	8007fa4 <USBD_GetConfig>
          break;
 800769a:	e013      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fcb6 	bl	8008010 <USBD_GetStatus>
          break;
 80076a4:	e00e      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fce5 	bl	8008078 <USBD_SetFeature>
          break;
 80076ae:	e009      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fd09 	bl	80080ca <USBD_ClrFeature>
          break;
 80076b8:	e004      	b.n	80076c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fd60 	bl	8008182 <USBD_CtlError>
          break;
 80076c2:	bf00      	nop
      }
      break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fd5a 	bl	8008182 <USBD_CtlError>
      break;
 80076ce:	bf00      	nop
  }

  return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop

080076dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076f2:	2b40      	cmp	r3, #64	@ 0x40
 80076f4:	d005      	beq.n	8007702 <USBD_StdItfReq+0x26>
 80076f6:	2b40      	cmp	r3, #64	@ 0x40
 80076f8:	d852      	bhi.n	80077a0 <USBD_StdItfReq+0xc4>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <USBD_StdItfReq+0x26>
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d14e      	bne.n	80077a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007708:	b2db      	uxtb	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	2b02      	cmp	r3, #2
 800770e:	d840      	bhi.n	8007792 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	889b      	ldrh	r3, [r3, #4]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d836      	bhi.n	8007788 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	889b      	ldrh	r3, [r3, #4]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff feda 	bl	80074dc <USBD_CoreFindIF>
 8007728:	4603      	mov	r3, r0
 800772a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2bff      	cmp	r3, #255	@ 0xff
 8007730:	d01d      	beq.n	800776e <USBD_StdItfReq+0x92>
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d11a      	bne.n	800776e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007738:	7bba      	ldrb	r2, [r7, #14]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	@ 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00f      	beq.n	8007768 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007748:	7bba      	ldrb	r2, [r7, #14]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007750:	7bba      	ldrb	r2, [r7, #14]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32ae      	adds	r2, #174	@ 0xae
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007766:	e004      	b.n	8007772 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800776c:	e001      	b.n	8007772 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88db      	ldrh	r3, [r3, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d110      	bne.n	800779c <USBD_StdItfReq+0xc0>
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10d      	bne.n	800779c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fddc 	bl	800833e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007786:	e009      	b.n	800779c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fcf9 	bl	8008182 <USBD_CtlError>
          break;
 8007790:	e004      	b.n	800779c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fcf4 	bl	8008182 <USBD_CtlError>
          break;
 800779a:	e000      	b.n	800779e <USBD_StdItfReq+0xc2>
          break;
 800779c:	bf00      	nop
      }
      break;
 800779e:	e004      	b.n	80077aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fced 	bl	8008182 <USBD_CtlError>
      break;
 80077a8:	bf00      	nop
  }

  return ret;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	889b      	ldrh	r3, [r3, #4]
 80077c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077d0:	2b40      	cmp	r3, #64	@ 0x40
 80077d2:	d007      	beq.n	80077e4 <USBD_StdEPReq+0x30>
 80077d4:	2b40      	cmp	r3, #64	@ 0x40
 80077d6:	f200 8181 	bhi.w	8007adc <USBD_StdEPReq+0x328>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02a      	beq.n	8007834 <USBD_StdEPReq+0x80>
 80077de:	2b20      	cmp	r3, #32
 80077e0:	f040 817c 	bne.w	8007adc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fe84 	bl	80074f6 <USBD_CoreFindEP>
 80077ee:	4603      	mov	r3, r0
 80077f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f2:	7b7b      	ldrb	r3, [r7, #13]
 80077f4:	2bff      	cmp	r3, #255	@ 0xff
 80077f6:	f000 8176 	beq.w	8007ae6 <USBD_StdEPReq+0x332>
 80077fa:	7b7b      	ldrb	r3, [r7, #13]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 8172 	bne.w	8007ae6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007802:	7b7a      	ldrb	r2, [r7, #13]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800780a:	7b7a      	ldrb	r2, [r7, #13]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	32ae      	adds	r2, #174	@ 0xae
 8007810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8165 	beq.w	8007ae6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800781c:	7b7a      	ldrb	r2, [r7, #13]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	@ 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007832:	e158      	b.n	8007ae6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d008      	beq.n	800784e <USBD_StdEPReq+0x9a>
 800783c:	2b03      	cmp	r3, #3
 800783e:	f300 8147 	bgt.w	8007ad0 <USBD_StdEPReq+0x31c>
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 809b 	beq.w	800797e <USBD_StdEPReq+0x1ca>
 8007848:	2b01      	cmp	r3, #1
 800784a:	d03c      	beq.n	80078c6 <USBD_StdEPReq+0x112>
 800784c:	e140      	b.n	8007ad0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d002      	beq.n	8007860 <USBD_StdEPReq+0xac>
 800785a:	2b03      	cmp	r3, #3
 800785c:	d016      	beq.n	800788c <USBD_StdEPReq+0xd8>
 800785e:	e02c      	b.n	80078ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <USBD_StdEPReq+0xce>
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b80      	cmp	r3, #128	@ 0x80
 800786a:	d00a      	beq.n	8007882 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 f8db 	bl	8008a2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007876:	2180      	movs	r1, #128	@ 0x80
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f8d7 	bl	8008a2c <USBD_LL_StallEP>
 800787e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007880:	e020      	b.n	80078c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc7c 	bl	8008182 <USBD_CtlError>
              break;
 800788a:	e01b      	b.n	80078c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	885b      	ldrh	r3, [r3, #2]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10e      	bne.n	80078b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <USBD_StdEPReq+0xfe>
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b80      	cmp	r3, #128	@ 0x80
 800789e:	d008      	beq.n	80078b2 <USBD_StdEPReq+0xfe>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	88db      	ldrh	r3, [r3, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f8bd 	bl	8008a2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fd43 	bl	800833e <USBD_CtlSendStatus>

              break;
 80078b8:	e004      	b.n	80078c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc60 	bl	8008182 <USBD_CtlError>
              break;
 80078c2:	bf00      	nop
          }
          break;
 80078c4:	e109      	b.n	8007ada <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d002      	beq.n	80078d8 <USBD_StdEPReq+0x124>
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d016      	beq.n	8007904 <USBD_StdEPReq+0x150>
 80078d6:	e04b      	b.n	8007970 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00d      	beq.n	80078fa <USBD_StdEPReq+0x146>
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b80      	cmp	r3, #128	@ 0x80
 80078e2:	d00a      	beq.n	80078fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f89f 	bl	8008a2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ee:	2180      	movs	r1, #128	@ 0x80
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 f89b 	bl	8008a2c <USBD_LL_StallEP>
 80078f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f8:	e040      	b.n	800797c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc40 	bl	8008182 <USBD_CtlError>
              break;
 8007902:	e03b      	b.n	800797c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	885b      	ldrh	r3, [r3, #2]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d136      	bne.n	800797a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 f8a5 	bl	8008a6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fd0c 	bl	800833e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fde3 	bl	80074f6 <USBD_CoreFindEP>
 8007930:	4603      	mov	r3, r0
 8007932:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007934:	7b7b      	ldrb	r3, [r7, #13]
 8007936:	2bff      	cmp	r3, #255	@ 0xff
 8007938:	d01f      	beq.n	800797a <USBD_StdEPReq+0x1c6>
 800793a:	7b7b      	ldrb	r3, [r7, #13]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d11c      	bne.n	800797a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007940:	7b7a      	ldrb	r2, [r7, #13]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007948:	7b7a      	ldrb	r2, [r7, #13]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	32ae      	adds	r2, #174	@ 0xae
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d010      	beq.n	800797a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007958:	7b7a      	ldrb	r2, [r7, #13]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	32ae      	adds	r2, #174	@ 0xae
 800795e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800796e:	e004      	b.n	800797a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fc05 	bl	8008182 <USBD_CtlError>
              break;
 8007978:	e000      	b.n	800797c <USBD_StdEPReq+0x1c8>
              break;
 800797a:	bf00      	nop
          }
          break;
 800797c:	e0ad      	b.n	8007ada <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d002      	beq.n	8007990 <USBD_StdEPReq+0x1dc>
 800798a:	2b03      	cmp	r3, #3
 800798c:	d033      	beq.n	80079f6 <USBD_StdEPReq+0x242>
 800798e:	e099      	b.n	8007ac4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <USBD_StdEPReq+0x1f2>
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b80      	cmp	r3, #128	@ 0x80
 800799a:	d004      	beq.n	80079a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fbef 	bl	8008182 <USBD_CtlError>
                break;
 80079a4:	e093      	b.n	8007ace <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da0b      	bge.n	80079c6 <USBD_StdEPReq+0x212>
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	3310      	adds	r3, #16
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	3304      	adds	r3, #4
 80079c4:	e00b      	b.n	80079de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	4413      	add	r3, r2
 80079dc:	3304      	adds	r3, #4
 80079de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	330e      	adds	r3, #14
 80079ea:	2202      	movs	r2, #2
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc44 	bl	800827c <USBD_CtlSendData>
              break;
 80079f4:	e06b      	b.n	8007ace <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	da11      	bge.n	8007a22 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	3323      	adds	r3, #35	@ 0x23
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d117      	bne.n	8007a48 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fbb1 	bl	8008182 <USBD_CtlError>
                  break;
 8007a20:	e055      	b.n	8007ace <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fb9e 	bl	8008182 <USBD_CtlError>
                  break;
 8007a46:	e042      	b.n	8007ace <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	da0b      	bge.n	8007a68 <USBD_StdEPReq+0x2b4>
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	3310      	adds	r3, #16
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	4413      	add	r3, r2
 8007a64:	3304      	adds	r3, #4
 8007a66:	e00b      	b.n	8007a80 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3304      	adds	r3, #4
 8007a80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <USBD_StdEPReq+0x2da>
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b80      	cmp	r3, #128	@ 0x80
 8007a8c:	d103      	bne.n	8007a96 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	739a      	strb	r2, [r3, #14]
 8007a94:	e00e      	b.n	8007ab4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 f804 	bl	8008aa8 <USBD_LL_IsStallEP>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	739a      	strb	r2, [r3, #14]
 8007aac:	e002      	b.n	8007ab4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	330e      	adds	r3, #14
 8007ab8:	2202      	movs	r2, #2
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fbdd 	bl	800827c <USBD_CtlSendData>
              break;
 8007ac2:	e004      	b.n	8007ace <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fb5b 	bl	8008182 <USBD_CtlError>
              break;
 8007acc:	bf00      	nop
          }
          break;
 8007ace:	e004      	b.n	8007ada <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fb55 	bl	8008182 <USBD_CtlError>
          break;
 8007ad8:	bf00      	nop
      }
      break;
 8007ada:	e005      	b.n	8007ae8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb4f 	bl	8008182 <USBD_CtlError>
      break;
 8007ae4:	e000      	b.n	8007ae8 <USBD_StdEPReq+0x334>
      break;
 8007ae6:	bf00      	nop
  }

  return ret;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	885b      	ldrh	r3, [r3, #2]
 8007b0e:	0a1b      	lsrs	r3, r3, #8
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	2b06      	cmp	r3, #6
 8007b16:	f200 8128 	bhi.w	8007d6a <USBD_GetDescriptor+0x276>
 8007b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <USBD_GetDescriptor+0x2c>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b3d 	.word	0x08007b3d
 8007b24:	08007b55 	.word	0x08007b55
 8007b28:	08007b95 	.word	0x08007b95
 8007b2c:	08007d6b 	.word	0x08007d6b
 8007b30:	08007d6b 	.word	0x08007d6b
 8007b34:	08007d0b 	.word	0x08007d0b
 8007b38:	08007d37 	.word	0x08007d37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	7c12      	ldrb	r2, [r2, #16]
 8007b48:	f107 0108 	add.w	r1, r7, #8
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
 8007b50:	60f8      	str	r0, [r7, #12]
      break;
 8007b52:	e112      	b.n	8007d7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7c1b      	ldrb	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10d      	bne.n	8007b78 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	f107 0208 	add.w	r2, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	2202      	movs	r2, #2
 8007b74:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b76:	e100      	b.n	8007d7a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b80:	f107 0208 	add.w	r2, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	2202      	movs	r2, #2
 8007b90:	701a      	strb	r2, [r3, #0]
      break;
 8007b92:	e0f2      	b.n	8007d7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	885b      	ldrh	r3, [r3, #2]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	f200 80ac 	bhi.w	8007cf8 <USBD_GetDescriptor+0x204>
 8007ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba8 <USBD_GetDescriptor+0xb4>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bc1 	.word	0x08007bc1
 8007bac:	08007bf5 	.word	0x08007bf5
 8007bb0:	08007c29 	.word	0x08007c29
 8007bb4:	08007c5d 	.word	0x08007c5d
 8007bb8:	08007c91 	.word	0x08007c91
 8007bbc:	08007cc5 	.word	0x08007cc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	7c12      	ldrb	r2, [r2, #16]
 8007bd8:	f107 0108 	add.w	r1, r7, #8
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007be2:	e091      	b.n	8007d08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 facb 	bl	8008182 <USBD_CtlError>
            err++;
 8007bec:	7afb      	ldrb	r3, [r7, #11]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bf2:	e089      	b.n	8007d08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	7c12      	ldrb	r2, [r2, #16]
 8007c0c:	f107 0108 	add.w	r1, r7, #8
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c16:	e077      	b.n	8007d08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fab1 	bl	8008182 <USBD_CtlError>
            err++;
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	3301      	adds	r3, #1
 8007c24:	72fb      	strb	r3, [r7, #11]
          break;
 8007c26:	e06f      	b.n	8007d08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00b      	beq.n	8007c4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	7c12      	ldrb	r2, [r2, #16]
 8007c40:	f107 0108 	add.w	r1, r7, #8
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
 8007c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c4a:	e05d      	b.n	8007d08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa97 	bl	8008182 <USBD_CtlError>
            err++;
 8007c54:	7afb      	ldrb	r3, [r7, #11]
 8007c56:	3301      	adds	r3, #1
 8007c58:	72fb      	strb	r3, [r7, #11]
          break;
 8007c5a:	e055      	b.n	8007d08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7c12      	ldrb	r2, [r2, #16]
 8007c74:	f107 0108 	add.w	r1, r7, #8
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7e:	e043      	b.n	8007d08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa7d 	bl	8008182 <USBD_CtlError>
            err++;
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8e:	e03b      	b.n	8007d08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7c12      	ldrb	r2, [r2, #16]
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb2:	e029      	b.n	8007d08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa63 	bl	8008182 <USBD_CtlError>
            err++;
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc2:	e021      	b.n	8007d08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7c12      	ldrb	r2, [r2, #16]
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce6:	e00f      	b.n	8007d08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa49 	bl	8008182 <USBD_CtlError>
            err++;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf6:	e007      	b.n	8007d08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa41 	bl	8008182 <USBD_CtlError>
          err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d06:	bf00      	nop
      }
      break;
 8007d08:	e037      	b.n	8007d7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7c1b      	ldrb	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1a:	f107 0208 	add.w	r2, r7, #8
 8007d1e:	4610      	mov	r0, r2
 8007d20:	4798      	blx	r3
 8007d22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d24:	e029      	b.n	8007d7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa2a 	bl	8008182 <USBD_CtlError>
        err++;
 8007d2e:	7afb      	ldrb	r3, [r7, #11]
 8007d30:	3301      	adds	r3, #1
 8007d32:	72fb      	strb	r3, [r7, #11]
      break;
 8007d34:	e021      	b.n	8007d7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7c1b      	ldrb	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10d      	bne.n	8007d5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d46:	f107 0208 	add.w	r2, r7, #8
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	2207      	movs	r2, #7
 8007d56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d58:	e00f      	b.n	8007d7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa10 	bl	8008182 <USBD_CtlError>
        err++;
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	3301      	adds	r3, #1
 8007d66:	72fb      	strb	r3, [r7, #11]
      break;
 8007d68:	e007      	b.n	8007d7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa08 	bl	8008182 <USBD_CtlError>
      err++;
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	3301      	adds	r3, #1
 8007d76:	72fb      	strb	r3, [r7, #11]
      break;
 8007d78:	bf00      	nop
  }

  if (err != 0U)
 8007d7a:	7afb      	ldrb	r3, [r7, #11]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d11e      	bne.n	8007dbe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	88db      	ldrh	r3, [r3, #6]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d016      	beq.n	8007db6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d88:	893b      	ldrh	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00e      	beq.n	8007dac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88da      	ldrh	r2, [r3, #6]
 8007d92:	893b      	ldrh	r3, [r7, #8]
 8007d94:	4293      	cmp	r3, r2
 8007d96:	bf28      	it	cs
 8007d98:	4613      	movcs	r3, r2
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d9e:	893b      	ldrh	r3, [r7, #8]
 8007da0:	461a      	mov	r2, r3
 8007da2:	68f9      	ldr	r1, [r7, #12]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fa69 	bl	800827c <USBD_CtlSendData>
 8007daa:	e009      	b.n	8007dc0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f9e7 	bl	8008182 <USBD_CtlError>
 8007db4:	e004      	b.n	8007dc0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fac1 	bl	800833e <USBD_CtlSendStatus>
 8007dbc:	e000      	b.n	8007dc0 <USBD_GetDescriptor+0x2cc>
    return;
 8007dbe:	bf00      	nop
  }
}
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop

08007dc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	889b      	ldrh	r3, [r3, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d131      	bne.n	8007e3e <USBD_SetAddress+0x76>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	88db      	ldrh	r3, [r3, #6]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d12d      	bne.n	8007e3e <USBD_SetAddress+0x76>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	885b      	ldrh	r3, [r3, #2]
 8007de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007de8:	d829      	bhi.n	8007e3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d104      	bne.n	8007e0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f9bc 	bl	8008182 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	e01d      	b.n	8007e48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7bfa      	ldrb	r2, [r7, #15]
 8007e10:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fe71 	bl	8008b00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa8d 	bl	800833e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e32:	e009      	b.n	8007e48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3c:	e004      	b.n	8007e48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f99e 	bl	8008182 <USBD_CtlError>
  }
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	885b      	ldrh	r3, [r3, #2]
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	4b4e      	ldr	r3, [pc, #312]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007e66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e68:	4b4d      	ldr	r3, [pc, #308]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d905      	bls.n	8007e7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f985 	bl	8008182 <USBD_CtlError>
    return USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e08c      	b.n	8007f96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d002      	beq.n	8007e8e <USBD_SetConfig+0x3e>
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d029      	beq.n	8007ee0 <USBD_SetConfig+0x90>
 8007e8c:	e075      	b.n	8007f7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e8e:	4b44      	ldr	r3, [pc, #272]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d020      	beq.n	8007ed8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e96:	4b42      	ldr	r3, [pc, #264]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fe ffcd 	bl	8006e46 <USBD_SetClassConfig>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d008      	beq.n	8007ec8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f962 	bl	8008182 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ec6:	e065      	b.n	8007f94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fa38 	bl	800833e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ed6:	e05d      	b.n	8007f94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa30 	bl	800833e <USBD_CtlSendStatus>
      break;
 8007ede:	e059      	b.n	8007f94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d112      	bne.n	8007f0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007efa:	4b29      	ldr	r3, [pc, #164]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fe ffbc 	bl	8006e7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa19 	bl	800833e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f0c:	e042      	b.n	8007f94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f0e:	4b24      	ldr	r3, [pc, #144]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d02a      	beq.n	8007f72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7fe ffaa 	bl	8006e7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f34:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe ff83 	bl	8006e46 <USBD_SetClassConfig>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00f      	beq.n	8007f6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f918 	bl	8008182 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fe ff8f 	bl	8006e7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f68:	e014      	b.n	8007f94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f9e7 	bl	800833e <USBD_CtlSendStatus>
      break;
 8007f70:	e010      	b.n	8007f94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f9e3 	bl	800833e <USBD_CtlSendStatus>
      break;
 8007f78:	e00c      	b.n	8007f94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f900 	bl	8008182 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f82:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <USBD_SetConfig+0x150>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7fe ff78 	bl	8006e7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	73fb      	strb	r3, [r7, #15]
      break;
 8007f92:	bf00      	nop
  }

  return ret;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	200002fc 	.word	0x200002fc

08007fa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	88db      	ldrh	r3, [r3, #6]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d004      	beq.n	8007fc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f8e2 	bl	8008182 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fbe:	e023      	b.n	8008008 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	dc02      	bgt.n	8007fd2 <USBD_GetConfig+0x2e>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dc03      	bgt.n	8007fd8 <USBD_GetConfig+0x34>
 8007fd0:	e015      	b.n	8007ffe <USBD_GetConfig+0x5a>
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d00b      	beq.n	8007fee <USBD_GetConfig+0x4a>
 8007fd6:	e012      	b.n	8007ffe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f948 	bl	800827c <USBD_CtlSendData>
        break;
 8007fec:	e00c      	b.n	8008008 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f940 	bl	800827c <USBD_CtlSendData>
        break;
 8007ffc:	e004      	b.n	8008008 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8be 	bl	8008182 <USBD_CtlError>
        break;
 8008006:	bf00      	nop
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	2b02      	cmp	r3, #2
 8008026:	d81e      	bhi.n	8008066 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	88db      	ldrh	r3, [r3, #6]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d004      	beq.n	800803a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f8a5 	bl	8008182 <USBD_CtlError>
        break;
 8008038:	e01a      	b.n	8008070 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f043 0202 	orr.w	r2, r3, #2
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	330c      	adds	r3, #12
 800805a:	2202      	movs	r2, #2
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f90c 	bl	800827c <USBD_CtlSendData>
      break;
 8008064:	e004      	b.n	8008070 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f88a 	bl	8008182 <USBD_CtlError>
      break;
 800806e:	bf00      	nop
  }
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d107      	bne.n	800809a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f953 	bl	800833e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008098:	e013      	b.n	80080c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d10b      	bne.n	80080ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	889b      	ldrh	r3, [r3, #4]
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f943 	bl	800833e <USBD_CtlSendStatus>
}
 80080b8:	e003      	b.n	80080c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f860 	bl	8008182 <USBD_CtlError>
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d80b      	bhi.n	80080fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d10c      	bne.n	8008104 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f923 	bl	800833e <USBD_CtlSendStatus>
      }
      break;
 80080f8:	e004      	b.n	8008104 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f840 	bl	8008182 <USBD_CtlError>
      break;
 8008102:	e000      	b.n	8008106 <USBD_ClrFeature+0x3c>
      break;
 8008104:	bf00      	nop
  }
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7ff fa3d 	bl	80075b8 <SWAPBYTE>
 800813e:	4603      	mov	r3, r0
 8008140:	461a      	mov	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3301      	adds	r3, #1
 8008150:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fa30 	bl	80075b8 <SWAPBYTE>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fa23 	bl	80075b8 <SWAPBYTE>
 8008172:	4603      	mov	r3, r0
 8008174:	461a      	mov	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	80da      	strh	r2, [r3, #6]
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800818c:	2180      	movs	r1, #128	@ 0x80
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fc4c 	bl	8008a2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008194:	2100      	movs	r1, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fc48 	bl	8008a2c <USBD_LL_StallEP>
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d042      	beq.n	8008240 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80081be:	6938      	ldr	r0, [r7, #16]
 80081c0:	f000 f842 	bl	8008248 <USBD_GetLen>
 80081c4:	4603      	mov	r3, r0
 80081c6:	3301      	adds	r3, #1
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ce:	d808      	bhi.n	80081e2 <USBD_GetString+0x3e>
 80081d0:	6938      	ldr	r0, [r7, #16]
 80081d2:	f000 f839 	bl	8008248 <USBD_GetLen>
 80081d6:	4603      	mov	r3, r0
 80081d8:	3301      	adds	r3, #1
 80081da:	b29b      	uxth	r3, r3
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	e001      	b.n	80081e6 <USBD_GetString+0x42>
 80081e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4413      	add	r3, r2
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	7812      	ldrb	r2, [r2, #0]
 80081f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	3301      	adds	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	2203      	movs	r2, #3
 8008204:	701a      	strb	r2, [r3, #0]
  idx++;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	3301      	adds	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800820c:	e013      	b.n	8008236 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4413      	add	r3, r2
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	7812      	ldrb	r2, [r2, #0]
 8008218:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	3301      	adds	r3, #1
 800821e:	613b      	str	r3, [r7, #16]
    idx++;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	3301      	adds	r3, #1
 8008224:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	4413      	add	r3, r2
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	3301      	adds	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e7      	bne.n	800820e <USBD_GetString+0x6a>
 800823e:	e000      	b.n	8008242 <USBD_GetString+0x9e>
    return;
 8008240:	bf00      	nop
  }
}
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008258:	e005      	b.n	8008266 <USBD_GetLen+0x1e>
  {
    len++;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	3301      	adds	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3301      	adds	r3, #1
 8008264:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f5      	bne.n	800825a <USBD_GetLen+0x12>
  }

  return len;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2202      	movs	r2, #2
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	2100      	movs	r1, #0
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fc48 	bl	8008b3e <USBD_LL_Transmit>

  return USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	2100      	movs	r1, #0
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fc37 	bl	8008b3e <USBD_LL_Transmit>

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2203      	movs	r2, #3
 80082ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	2100      	movs	r1, #0
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 fc37 	bl	8008b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fc26 	bl	8008b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2204      	movs	r2, #4
 800834a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800834e:	2300      	movs	r3, #0
 8008350:	2200      	movs	r2, #0
 8008352:	2100      	movs	r1, #0
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fbf2 	bl	8008b3e <USBD_LL_Transmit>

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2205      	movs	r2, #5
 8008370:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008374:	2300      	movs	r3, #0
 8008376:	2200      	movs	r2, #0
 8008378:	2100      	movs	r1, #0
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fc00 	bl	8008b80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008390:	2200      	movs	r2, #0
 8008392:	4912      	ldr	r1, [pc, #72]	@ (80083dc <MX_USB_DEVICE_Init+0x50>)
 8008394:	4812      	ldr	r0, [pc, #72]	@ (80083e0 <MX_USB_DEVICE_Init+0x54>)
 8008396:	f7fe fcd9 	bl	8006d4c <USBD_Init>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083a0:	f7f8 fbb0 	bl	8000b04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80083a4:	490f      	ldr	r1, [pc, #60]	@ (80083e4 <MX_USB_DEVICE_Init+0x58>)
 80083a6:	480e      	ldr	r0, [pc, #56]	@ (80083e0 <MX_USB_DEVICE_Init+0x54>)
 80083a8:	f7fe fd00 	bl	8006dac <USBD_RegisterClass>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083b2:	f7f8 fba7 	bl	8000b04 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80083b6:	490c      	ldr	r1, [pc, #48]	@ (80083e8 <MX_USB_DEVICE_Init+0x5c>)
 80083b8:	4809      	ldr	r0, [pc, #36]	@ (80083e0 <MX_USB_DEVICE_Init+0x54>)
 80083ba:	f7fe fcad 	bl	8006d18 <USBD_CUSTOM_HID_RegisterInterface>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083c4:	f7f8 fb9e 	bl	8000b04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083c8:	4805      	ldr	r0, [pc, #20]	@ (80083e0 <MX_USB_DEVICE_Init+0x54>)
 80083ca:	f7fe fd25 	bl	8006e18 <USBD_Start>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083d4:	f7f8 fb96 	bl	8000b04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083d8:	bf00      	nop
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200000f0 	.word	0x200000f0
 80083e0:	20000300 	.word	0x20000300
 80083e4:	2000002c 	.word	0x2000002c
 80083e8:	200000e0 	.word	0x200000e0

080083ec <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008400:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008402:	4618      	mov	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	460a      	mov	r2, r1
 8008416:	71fb      	strb	r3, [r7, #7]
 8008418:	4613      	mov	r3, r2
 800841a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800841c:	4806      	ldr	r0, [pc, #24]	@ (8008438 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800841e:	f7fe fc19 	bl	8006c54 <USBD_CUSTOM_HID_ReceivePacket>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8008428:	f04f 33ff 	mov.w	r3, #4294967295
 800842c:	e000      	b.n	8008430 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800842e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000300 	.word	0x20000300

0800843c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2212      	movs	r2, #18
 800844c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800844e:	4b03      	ldr	r3, [pc, #12]	@ (800845c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	2000010c 	.word	0x2000010c

08008460 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2204      	movs	r2, #4
 8008470:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	@ (8008480 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000120 	.word	0x20000120

08008484 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	4907      	ldr	r1, [pc, #28]	@ (80084b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800849a:	4808      	ldr	r0, [pc, #32]	@ (80084bc <USBD_FS_ProductStrDescriptor+0x38>)
 800849c:	f7ff fe82 	bl	80081a4 <USBD_GetString>
 80084a0:	e004      	b.n	80084ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4904      	ldr	r1, [pc, #16]	@ (80084b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80084a6:	4805      	ldr	r0, [pc, #20]	@ (80084bc <USBD_FS_ProductStrDescriptor+0x38>)
 80084a8:	f7ff fe7c 	bl	80081a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ac:	4b02      	ldr	r3, [pc, #8]	@ (80084b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	200005dc 	.word	0x200005dc
 80084bc:	08008cbc 	.word	0x08008cbc

080084c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	4904      	ldr	r1, [pc, #16]	@ (80084e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084d0:	4804      	ldr	r0, [pc, #16]	@ (80084e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084d2:	f7ff fe67 	bl	80081a4 <USBD_GetString>
  return USBD_StrDesc;
 80084d6:	4b02      	ldr	r3, [pc, #8]	@ (80084e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	200005dc 	.word	0x200005dc
 80084e4:	08008cdc 	.word	0x08008cdc

080084e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	221a      	movs	r2, #26
 80084f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084fa:	f000 f843 	bl	8008584 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084fe:	4b02      	ldr	r3, [pc, #8]	@ (8008508 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000124 	.word	0x20000124

0800850c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4907      	ldr	r1, [pc, #28]	@ (8008540 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008522:	4808      	ldr	r0, [pc, #32]	@ (8008544 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008524:	f7ff fe3e 	bl	80081a4 <USBD_GetString>
 8008528:	e004      	b.n	8008534 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	4904      	ldr	r1, [pc, #16]	@ (8008540 <USBD_FS_ConfigStrDescriptor+0x34>)
 800852e:	4805      	ldr	r0, [pc, #20]	@ (8008544 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008530:	f7ff fe38 	bl	80081a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008534:	4b02      	ldr	r3, [pc, #8]	@ (8008540 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200005dc 	.word	0x200005dc
 8008544:	08008ce8 	.word	0x08008ce8

08008548 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4907      	ldr	r1, [pc, #28]	@ (800857c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800855e:	4808      	ldr	r0, [pc, #32]	@ (8008580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008560:	f7ff fe20 	bl	80081a4 <USBD_GetString>
 8008564:	e004      	b.n	8008570 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4904      	ldr	r1, [pc, #16]	@ (800857c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800856a:	4805      	ldr	r0, [pc, #20]	@ (8008580 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800856c:	f7ff fe1a 	bl	80081a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008570:	4b02      	ldr	r3, [pc, #8]	@ (800857c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	200005dc 	.word	0x200005dc
 8008580:	08008cfc 	.word	0x08008cfc

08008584 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800858a:	4b0f      	ldr	r3, [pc, #60]	@ (80085c8 <Get_SerialNum+0x44>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008590:	4b0e      	ldr	r3, [pc, #56]	@ (80085cc <Get_SerialNum+0x48>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008596:	4b0e      	ldr	r3, [pc, #56]	@ (80085d0 <Get_SerialNum+0x4c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085aa:	2208      	movs	r2, #8
 80085ac:	4909      	ldr	r1, [pc, #36]	@ (80085d4 <Get_SerialNum+0x50>)
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 f814 	bl	80085dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085b4:	2204      	movs	r2, #4
 80085b6:	4908      	ldr	r1, [pc, #32]	@ (80085d8 <Get_SerialNum+0x54>)
 80085b8:	68b8      	ldr	r0, [r7, #8]
 80085ba:	f000 f80f 	bl	80085dc <IntToUnicode>
  }
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	1fff7a10 	.word	0x1fff7a10
 80085cc:	1fff7a14 	.word	0x1fff7a14
 80085d0:	1fff7a18 	.word	0x1fff7a18
 80085d4:	20000126 	.word	0x20000126
 80085d8:	20000136 	.word	0x20000136

080085dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085ee:	2300      	movs	r3, #0
 80085f0:	75fb      	strb	r3, [r7, #23]
 80085f2:	e027      	b.n	8008644 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	0f1b      	lsrs	r3, r3, #28
 80085f8:	2b09      	cmp	r3, #9
 80085fa:	d80b      	bhi.n	8008614 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	0f1b      	lsrs	r3, r3, #28
 8008600:	b2da      	uxtb	r2, r3
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	4619      	mov	r1, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	440b      	add	r3, r1
 800860c:	3230      	adds	r2, #48	@ 0x30
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	e00a      	b.n	800862a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	0f1b      	lsrs	r3, r3, #28
 8008618:	b2da      	uxtb	r2, r3
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4619      	mov	r1, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	440b      	add	r3, r1
 8008624:	3237      	adds	r2, #55	@ 0x37
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	3301      	adds	r3, #1
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	4413      	add	r3, r2
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	3301      	adds	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
 8008644:	7dfa      	ldrb	r2, [r7, #23]
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	429a      	cmp	r2, r3
 800864a:	d3d3      	bcc.n	80085f4 <IntToUnicode+0x18>
  }
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	@ 0x28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008664:	f107 0314 	add.w	r3, r7, #20
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	605a      	str	r2, [r3, #4]
 800866e:	609a      	str	r2, [r3, #8]
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800867c:	d13a      	bne.n	80086f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867e:	2300      	movs	r3, #0
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	4b1e      	ldr	r3, [pc, #120]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 8008684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008686:	4a1d      	ldr	r2, [pc, #116]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	6313      	str	r3, [r2, #48]	@ 0x30
 800868e:	4b1b      	ldr	r3, [pc, #108]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 8008690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	613b      	str	r3, [r7, #16]
 8008698:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800869a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800869e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a0:	2302      	movs	r3, #2
 80086a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086a8:	2303      	movs	r3, #3
 80086aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086ac:	230a      	movs	r3, #10
 80086ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b0:	f107 0314 	add.w	r3, r7, #20
 80086b4:	4619      	mov	r1, r3
 80086b6:	4812      	ldr	r0, [pc, #72]	@ (8008700 <HAL_PCD_MspInit+0xa4>)
 80086b8:	f7f9 fe54 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086bc:	4b0f      	ldr	r3, [pc, #60]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 80086be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c0:	4a0e      	ldr	r2, [pc, #56]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 80086c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	4b0b      	ldr	r3, [pc, #44]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 80086ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d0:	4a0a      	ldr	r2, [pc, #40]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 80086d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80086d8:	4b08      	ldr	r3, [pc, #32]	@ (80086fc <HAL_PCD_MspInit+0xa0>)
 80086da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086e4:	2200      	movs	r2, #0
 80086e6:	2100      	movs	r1, #0
 80086e8:	2043      	movs	r0, #67	@ 0x43
 80086ea:	f7f9 fa94 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086ee:	2043      	movs	r0, #67	@ 0x43
 80086f0:	f7f9 faad 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086f4:	bf00      	nop
 80086f6:	3728      	adds	r7, #40	@ 0x28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40023800 	.word	0x40023800
 8008700:	40020000 	.word	0x40020000

08008704 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fbc9 	bl	8006eb2 <USBD_LL_SetupStage>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	4619      	mov	r1, r3
 8008752:	f7fe fc03 	bl	8006f5c <USBD_LL_DataOutStage>
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	4613      	mov	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	3320      	adds	r3, #32
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	4619      	mov	r1, r3
 8008786:	f7fe fca5 	bl	80070d4 <USBD_LL_DataInStage>
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fde9 	bl	8007378 <USBD_LL_SOF>
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087b6:	2301      	movs	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	79db      	ldrb	r3, [r3, #7]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d001      	beq.n	80087c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087c2:	f7f8 f99f 	bl	8000b04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087cc:	7bfa      	ldrb	r2, [r7, #15]
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fd8d 	bl	80072f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe fd34 	bl	800724a <USBD_LL_Reset>
}
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fd88 	bl	8007310 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	6812      	ldr	r2, [r2, #0]
 800880e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7adb      	ldrb	r3, [r3, #11]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d005      	beq.n	800882c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008820:	4b04      	ldr	r3, [pc, #16]	@ (8008834 <HAL_PCD_SuspendCallback+0x48>)
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	4a03      	ldr	r2, [pc, #12]	@ (8008834 <HAL_PCD_SuspendCallback+0x48>)
 8008826:	f043 0306 	orr.w	r3, r3, #6
 800882a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000ed00 	.word	0xe000ed00

08008838 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fd7e 	bl	8007348 <USBD_LL_Resume>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fdd6 	bl	800741c <USBD_LL_IsoOUTIncomplete>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800888a:	78fa      	ldrb	r2, [r7, #3]
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fd92 	bl	80073b8 <USBD_LL_IsoINIncomplete>
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fde8 	bl	8007480 <USBD_LL_DevConnected>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fde5 	bl	8007496 <USBD_LL_DevDisconnected>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d13c      	bne.n	800895e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088e4:	4a20      	ldr	r2, [pc, #128]	@ (8008968 <USBD_LL_Init+0x94>)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008968 <USBD_LL_Init+0x94>)
 80088f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008968 <USBD_LL_Init+0x94>)
 80088f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80088fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008968 <USBD_LL_Init+0x94>)
 80088fe:	2204      	movs	r2, #4
 8008900:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008902:	4b19      	ldr	r3, [pc, #100]	@ (8008968 <USBD_LL_Init+0x94>)
 8008904:	2202      	movs	r2, #2
 8008906:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008908:	4b17      	ldr	r3, [pc, #92]	@ (8008968 <USBD_LL_Init+0x94>)
 800890a:	2200      	movs	r2, #0
 800890c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800890e:	4b16      	ldr	r3, [pc, #88]	@ (8008968 <USBD_LL_Init+0x94>)
 8008910:	2202      	movs	r2, #2
 8008912:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008914:	4b14      	ldr	r3, [pc, #80]	@ (8008968 <USBD_LL_Init+0x94>)
 8008916:	2200      	movs	r2, #0
 8008918:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800891a:	4b13      	ldr	r3, [pc, #76]	@ (8008968 <USBD_LL_Init+0x94>)
 800891c:	2200      	movs	r2, #0
 800891e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008920:	4b11      	ldr	r3, [pc, #68]	@ (8008968 <USBD_LL_Init+0x94>)
 8008922:	2200      	movs	r2, #0
 8008924:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008926:	4b10      	ldr	r3, [pc, #64]	@ (8008968 <USBD_LL_Init+0x94>)
 8008928:	2200      	movs	r2, #0
 800892a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800892c:	4b0e      	ldr	r3, [pc, #56]	@ (8008968 <USBD_LL_Init+0x94>)
 800892e:	2200      	movs	r2, #0
 8008930:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008932:	480d      	ldr	r0, [pc, #52]	@ (8008968 <USBD_LL_Init+0x94>)
 8008934:	f7f9 feb2 	bl	800269c <HAL_PCD_Init>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800893e:	f7f8 f8e1 	bl	8000b04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008942:	2180      	movs	r1, #128	@ 0x80
 8008944:	4808      	ldr	r0, [pc, #32]	@ (8008968 <USBD_LL_Init+0x94>)
 8008946:	f7fb f8c6 	bl	8003ad6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800894a:	2240      	movs	r2, #64	@ 0x40
 800894c:	2100      	movs	r1, #0
 800894e:	4806      	ldr	r0, [pc, #24]	@ (8008968 <USBD_LL_Init+0x94>)
 8008950:	f7fb f87a 	bl	8003a48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008954:	2280      	movs	r2, #128	@ 0x80
 8008956:	2101      	movs	r1, #1
 8008958:	4803      	ldr	r0, [pc, #12]	@ (8008968 <USBD_LL_Init+0x94>)
 800895a:	f7fb f875 	bl	8003a48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	200007dc 	.word	0x200007dc

0800896c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008982:	4618      	mov	r0, r3
 8008984:	f7f9 ff99 	bl	80028ba <HAL_PCD_Start>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f930 	bl	8008bf4 <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	4608      	mov	r0, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	461a      	mov	r2, r3
 80089b0:	4603      	mov	r3, r0
 80089b2:	70fb      	strb	r3, [r7, #3]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70bb      	strb	r3, [r7, #2]
 80089b8:	4613      	mov	r3, r2
 80089ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80089ca:	78bb      	ldrb	r3, [r7, #2]
 80089cc:	883a      	ldrh	r2, [r7, #0]
 80089ce:	78f9      	ldrb	r1, [r7, #3]
 80089d0:	f7fa fc6d 	bl	80032ae <HAL_PCD_EP_Open>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f90a 	bl	8008bf4 <USBD_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a08:	78fa      	ldrb	r2, [r7, #3]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fa fcb8 	bl	8003382 <HAL_PCD_EP_Close>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f8eb 	bl	8008bf4 <USBD_Get_USB_Status>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fa fd58 	bl	8003500 <HAL_PCD_EP_SetStall>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 f8cc 	bl	8008bf4 <USBD_Get_USB_Status>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	4611      	mov	r1, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fa fd9c 	bl	80035c6 <HAL_PCD_EP_ClrStall>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 f8ad 	bl	8008bf4 <USBD_Get_USB_Status>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da0b      	bge.n	8008adc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aca:	68f9      	ldr	r1, [r7, #12]
 8008acc:	4613      	mov	r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	3316      	adds	r3, #22
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	e00b      	b.n	8008af4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008af2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b1a:	78fa      	ldrb	r2, [r7, #3]
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fa fba1 	bl	8003266 <HAL_PCD_SetAddress>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f862 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b5c:	7af9      	ldrb	r1, [r7, #11]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	f7fa fc93 	bl	800348c <HAL_PCD_EP_Transmit>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f841 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b76:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b9e:	7af9      	ldrb	r1, [r7, #11]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	f7fa fc37 	bl	8003416 <HAL_PCD_EP_Receive>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f820 	bl	8008bf4 <USBD_Get_USB_Status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008bcc:	4b03      	ldr	r3, [pc, #12]	@ (8008bdc <USBD_static_malloc+0x18>)
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20000cc0 	.word	0x20000cc0

08008be0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d817      	bhi.n	8008c38 <USBD_Get_USB_Status+0x44>
 8008c08:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <USBD_Get_USB_Status+0x1c>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c27 	.word	0x08008c27
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c33 	.word	0x08008c33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	e00b      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2a:	e008      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c30:	e005      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c32:	2303      	movs	r3, #3
 8008c34:	73fb      	strb	r3, [r7, #15]
    break;
 8008c36:	e002      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	bf00      	nop
  }
  return usb_status;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <memset>:
 8008c4c:	4402      	add	r2, r0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d100      	bne.n	8008c56 <memset+0xa>
 8008c54:	4770      	bx	lr
 8008c56:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5a:	e7f9      	b.n	8008c50 <memset+0x4>

08008c5c <__libc_init_array>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c94 <__libc_init_array+0x38>)
 8008c60:	4c0d      	ldr	r4, [pc, #52]	@ (8008c98 <__libc_init_array+0x3c>)
 8008c62:	1b64      	subs	r4, r4, r5
 8008c64:	10a4      	asrs	r4, r4, #2
 8008c66:	2600      	movs	r6, #0
 8008c68:	42a6      	cmp	r6, r4
 8008c6a:	d109      	bne.n	8008c80 <__libc_init_array+0x24>
 8008c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c9c <__libc_init_array+0x40>)
 8008c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8008ca0 <__libc_init_array+0x44>)
 8008c70:	f000 f818 	bl	8008ca4 <_init>
 8008c74:	1b64      	subs	r4, r4, r5
 8008c76:	10a4      	asrs	r4, r4, #2
 8008c78:	2600      	movs	r6, #0
 8008c7a:	42a6      	cmp	r6, r4
 8008c7c:	d105      	bne.n	8008c8a <__libc_init_array+0x2e>
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c84:	4798      	blx	r3
 8008c86:	3601      	adds	r6, #1
 8008c88:	e7ee      	b.n	8008c68 <__libc_init_array+0xc>
 8008c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c8e:	4798      	blx	r3
 8008c90:	3601      	adds	r6, #1
 8008c92:	e7f2      	b.n	8008c7a <__libc_init_array+0x1e>
 8008c94:	08008d34 	.word	0x08008d34
 8008c98:	08008d34 	.word	0x08008d34
 8008c9c:	08008d34 	.word	0x08008d34
 8008ca0:	08008d38 	.word	0x08008d38

08008ca4 <_init>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr

08008cb0 <_fini>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	bf00      	nop
 8008cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb6:	bc08      	pop	{r3}
 8008cb8:	469e      	mov	lr, r3
 8008cba:	4770      	bx	lr
